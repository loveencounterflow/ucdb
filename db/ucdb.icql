


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_main_first():
  drop table  if exists cpfrs;
  drop table  if exists variables;
  drop table  if exists outlines;
  drop view   if exists main;
  drop table  if exists _main_fallback;
  drop table  if exists _main;
  -- .......................................................................................................
  create table variables (
    key     text        not null  unique,
    value   json        not null,
    primary key ( key ) );
  -- .......................................................................................................
  create table cpfrs (
    cpfr        text        not null  unique,
    first_cid   integer     not null  unique,
    last_cid    integer     not null  unique,
    comment     text        not null,
    primary key ( cpfr ) );
  insert into cpfrs ( cpfr, first_cid, last_cid, comment ) values
    ( 'cpfr-cjka', 0x00000, 0x0ffff, 'Ideographs etc. in Unicode BMP' ),
    ( 'cpfr-cjkb', 0x20000, 0x2a6ff, 'CJK Ideographs Extension B' ),
    ( 'cpfr-cjkc', 0x2a700, 0x3ffff, 'CJK Ideographs beyond Extension B' );
  -- .......................................................................................................
  create table _main (
    iclabel     text    not null  unique,
    glyph       text    not null  unique,
    cid         integer not null  unique,
    is_u9cjkidg boolean not null,
    tags        text    not null,
    csg         text    not null,
    rsg         text    not null,
    fncr        text    not null,
    sfncr       text    not null,
    ncr         text    not null,
    xncr        text    not null,
    fontnick    text    not null,
    style       json,
    -- tex_block   text    not null,
    -- tex_glyph   text,
    primary key ( iclabel ) );
  -- .......................................................................................................
  create table _main_fallback (
    iclabel     text    unique default null,
    glyph       text    unique default null,
    cid         integer unique default null,
    is_u9cjkidg boolean unique default null,
    tags        text    unique default null,
    csg         text    unique default null,
    rsg         text    unique default null,
    fncr        text    unique default null,
    sfncr       text    unique default null,
    ncr         text    unique default null,
    xncr        text    unique default null,
    fontnick    text    unique not null,
    style       json    unique not null,
    -- tex_block   text    not null,
    -- tex_glyph   text,
    check (
      iclabel       is null and
      glyph         is null and
      cid           is null and
      is_u9cjkidg   is null and
      tags          is null and
      csg           is null and
      rsg           is null and
      fncr          is null and
      sfncr         is null and
      ncr           is null and
      xncr          is null ) );
  create view main as select * from _main union all select * from _main_fallback;
  insert into _main (
    iclabel,
    glyph, cid, is_u9cjkidg, tags,
    csg, rsg,
    fncr, sfncr, ncr, xncr,
    fontnick, style ) values
fragment create_table_main_middle( iclabel, glyph, cid, is_u9cjkidg, tags, csg, rsg, fncr, sfncr, ncr, xncr, fontnick, style ):
  ( $iclabel, $glyph, $cid, $is_u9cjkidg, $tags, $csg, $rsg, $fncr, $sfncr, $ncr, $xncr, $fontnick, $style )

-- ---------------------------------------------------------------------------------------------------------
procedure insert_fallback( fontnick, style ):
  insert into _main_fallback ( fontnick, style ) values ( $fontnick, $style );


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
procedure create_main_indexes():
  -- create index main_iclabel_index on _main ( iclabel );
  -- create index main_glyph_index on _main ( glyph );
  create index main_csg_index   on _main ( csg );
  create index main_rsg_index   on _main ( rsg );


-- =========================================================================================================
-- FONTNICKS
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_fontnicks_first():
  drop table  if exists outlines;
  drop table  if exists fontnicks;
  -- .......................................................................................................
  create table fontnicks (
    fontnick    text    not null,
    filename    text    not null,
    filepath    text    not null,
    filesize    integer not null,
    otf         text,
    primary key ( fontnick ) );
  insert into fontnicks ( fontnick, filename, filepath, filesize, otf ) values
fragment create_table_fontnicks_middle( fontnick, filename, filepath, filesize, otf ):
  ( $fontnick, $filename, $filepath, $filesize, $otf )

-- ---------------------------------------------------------------------------------------------------------
query walk_fontnick_table():
  select * from fontnicks order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query filepath_from_fontnick( fontnick ):
  select filepath from fontnicks where fontnick = $fontnick;


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query count_lines():
  select count(*) from main;

-- ---------------------------------------------------------------------------------------------------------
query read_lines():
  select
      *
    from main
    -- order by vnr_blob
    ;


-- =========================================================================================================
-- OUTLINES
-- ---------------------------------------------------------------------------------------------------------
procedure create_table_outlines():
  drop table if exists outlines;
  create table outlines (
    /*  NOTE: we use `iclabel`, not `glyph` or `cid` as primary key because in theory neither of the latter
        two is capable of expressing codepoints outside of Unicode. */
    iclabel     text    not null references _main ( iclabel ),
    fontnick    text    not null references fontnicks ( fontnick ),
    advance     float   not null,
    pathdata    text    not null,
    primary key ( iclabel, fontnick ) );

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT as in main etc, above, the insertion parts can be derived mechanically from the table
-- definition; as its stands, they're mere noise / code duplication:
fragment insert_into_outlines_first(): insert into outlines ( iclabel, fontnick, advance, pathdata ) values
fragment insert_into_outlines_middle( iclabel, fontnick, advance, pathdata ): ( $iclabel, $fontnick, $advance, $pathdata )

-- ---------------------------------------------------------------------------------------------------------
procedure create_outlines_indexes():
  create index outlines_fontnick_index on _main ( fontnick );

-- ---------------------------------------------------------------------------------------------------------
query default_pathdata_from_cid( cid ):
  select
      pathdata
    from outlines as OL
    join _main    as MN using ( iclabel )
    where true
      and MN.cid      = $cid
      -- ### TAINT should not hardcode fontnick, use priority table ###
      -- and OL.fontnick = 'sunexta'
      and OL.fontnick = 'fandolkairegular'
    limit 1;

-- ---------------------------------------------------------------------------------------------------------
query default_pathdata_from_glyph( glyph ):
  select
      pathdata
    from outlines as OL
    join _main    as MN using ( iclabel )
    where true
      and MN.glyph      = $glyph
      -- ### TAINT should not hardcode fontnick, use priority table ###
      -- and OL.fontnick = 'sunexta'
      and OL.fontnick = 'cwtexqheibold'
    limit 1;

-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query read_lines( limit ):
  select
      *
    from main
    -- order by vnr_blob
    limit $limit;

-- -- ---------------------------------------------------------------------------------------------------------
-- procedure create_view_main_with_deltas_etc():
--   drop view   if exists stages;
--   drop view   if exists _fontnick_priorities;
--   drop view   if exists _fontnick_boundaries_1;
--   drop view   if exists fontnick_boundaries;
--   drop view   if exists _main_with_deltas;
--   -- .......................................................................................................
--   create view _main_with_deltas as select
--       *,
--       -- iclabel                                           as iclabel,
--       -- csg                                               as csg,
--       -- cid                                               as cid,
--       -- lag(  cid, 1, 0x000000 )        over w1           as rear_cid,
--       -- lead( cid, 1, 0x10ffff )        over w1           as fore_cid,
--       cid - lag(  cid, 1, 0x000000 )  over w1           as rear_delta_cid,
--             lead( cid, 1, 0x10ffff )  over w1 - cid     as fore_delta_cid
--     from main
--     window w1 as ( partition by fontnick order by cid )
--     order by cid;
--   -- .......................................................................................................
--   create view _fontnick_boundaries_1 as with v1 as ( select
--         *
--       from _main_with_deltas
--       where ( rear_delta_cid != 1 ) or ( fore_delta_cid != 1 ) )
--     select
--         *,
--         case
--           when ( rear_delta_cid != 1 and fore_delta_cid != 1 )  then  'single'
--           when ( rear_delta_cid != 1 )                          then  'start'
--           else                                                        'stop' end      as boundary_type
--       from v1
--       order by cid;
--   -- .......................................................................................................
--   create view fontnick_boundaries as with v1 as ( select
--       *,
--       case
--         when boundary_type = 'start'  then  lead( cid, 1, null ) over ( order by cid )
--         when boundary_type = 'single' then  cid
--         else                                null end                                    as last_cid
--     from _fontnick_boundaries_1 )
--     select
--         v1.fontnick         as fontnick,
--         v1.cid              as first_cid,
--         v1.iclabel          as first_iclabel,
--         r2.cid              as last_cid,
--         r2.iclabel          as last_iclabel
--       from
--         v1
--         left join main as r2 on ( v1.last_cid = r2.cid )
--         where v1.boundary_type != 'stop'
--         order by v1.fontnick, v1.cid;
--   -- .......................................................................................................
--   create view _fontnick_priorities as select
--       fontnick                                as fontnick,
--       case fontnick
--         when 'sunexta'        then  100
--         when 'jizurathreeb'   then  900
--         else                        500 end   as priority
--     from fontnicks;
--   -- .......................................................................................................
--   create view stages as select
--       r1.fontnick                             as fontnick,
--       r4.cpfr                                 as cpfr,
--       dense_rank() over w                     as stagenr,
--       printf( 's%03d', dense_rank() over w )  as stagenick,
--       r3.priority                             as priority,
--       r1.first_cid                            as first_cid,
--       r1.last_cid                             as last_cid,
--       r1.first_iclabel                        as first_iclabel,
--       r1.last_iclabel                         as last_iclabel,
--       r2.filesize                             as filesize,
--       r2.filename                             as filename,
--       r2.filepath                             as filepath,
--       r2.otf                                  as otf
--     from      fontnick_boundaries   as r1
--     left join fontnicks             as r2 using ( fontnick )
--     left join _fontnick_priorities  as r3 using ( fontnick )
--     left join cpfrs                 as r4 on ( r1.first_cid >= r4.first_cid and r1.last_cid <= r4.last_cid )
--     window w as ( order by priority, filesize desc, fontnick )
--     order by r3.priority, filesize desc, fontnick
--     ;


-- -- ---------------------------------------------------------------------------------------------------------
-- query _main_with_deltas():    select * from _main_with_deltas;
-- query fontnick_boundaries():  select * from fontnick_boundaries;

-- -- ---------------------------------------------------------------------------------------------------------
-- query all_ranges_in_previous_stages( stagenr ):
--   select
--       r1.first_cid                            as first_cid,
--       r1.last_cid                             as last_cid,
--       r1.first_iclabel                        as first_iclabel,
--       r1.last_iclabel                         as last_iclabel,
--     from stages as r1
--     where true
--       and ( stagenr < $stagenr );






-- def _count_fontnicks_by_rsg():
--   query = """
--     with v1 as ( select distinct
--         rsg                     as rsg,
--         fontnick                as fontnick,
--         count(*) over w         as fontnick_count
--       from main
--       window w as ( partition by rsg, fontnick
--         /* range between unbounded preceding and unbounded following */ )
--       order by rsg, fontnick_count desc )
--     select
--       rsg                       as rsg,
--       fontnick                  as fontnick,
--       fontnick_count            as fontnick_count,
--       count(*) over w           as format_count
--     from v1
--       window w as ( partition by rsg )
--       order by format_count, rsg, fontnick_count desc
--       ;"""
