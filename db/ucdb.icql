
-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query sqlite_index_infos():
  select
      r1.type     as type,
      r1.name     as name,
      r1.tbl_name as tbl_name,
      ( select name from pragma_index_info( r1.name ) ) as col_name
    from sqlite_master as r1
    where type = 'index'
    order by name;"


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_main_first():
  drop table  if exists cpfrs;
  drop table  if exists variables;
  -- drop view   if exists duplicate_outlines;
  drop view   if exists all_outlines;
  drop view   if exists _all_outlines;
  drop view   if exists combifont_missing_outlines_as_cid_ranges;
  drop view   if exists combifont_missing_outlines;
  drop view   if exists outlines_of_combifonts;
  drop view   if exists outlines_of_sourcefonts;
  drop view   if exists combifonts;
  drop view   if exists all_glyphs_and_stylerules;
  drop table  if exists _outlines_of_sourcefonts;
  drop table  if exists main;
  -- .......................................................................................................
  create table variables (
    key     text        not null  unique,
    value   json        not null,
    primary key ( key ) );
  -- .......................................................................................................
  create table cpfrs (
    cpfr        text        not null  unique,
    first_cid   integer     not null  unique,
    last_cid    integer     not null  unique,
    comment     text        not null,
    primary key ( cpfr ) );
  insert into cpfrs ( cpfr, first_cid, last_cid, comment ) values
    ( 'cpfr-cjka', 0x00000, 0x0ffff, 'Ideographs etc. in Unicode BMP' ),
    ( 'cpfr-cjkb', 0x20000, 0x2a6ff, 'CJK Ideographs Extension B' ),
    ( 'cpfr-cjkc', 0x2a700, 0x3ffff, 'CJK Ideographs beyond Extension B' );
  -- .......................................................................................................
  create table main (
    iclabel     text    not null  unique,
    glyph       text    not null  unique,
    cid         integer not null  unique,
    is_u9cjkidg boolean not null,
    tags        text    not null,
    csg         text    not null,
    rsg         text    not null,
    fncr        text    not null,
    sfncr       text    not null,
    ncr         text    not null,
    xncr        text    not null,
    primary key ( iclabel ) );
  insert into main (
    iclabel,
    glyph, cid, is_u9cjkidg, tags,
    csg, rsg,
    fncr, sfncr, ncr, xncr ) values
fragment create_table_main_middle( iclabel, glyph, cid, is_u9cjkidg, tags, csg, rsg, fncr, sfncr, ncr, xncr ):
  ( $iclabel, $glyph, $cid, $is_u9cjkidg, $tags, $csg, $rsg, $fncr, $sfncr, $ncr, $xncr )

-- ---------------------------------------------------------------------------------------------------------
procedure create_main_indexes():
  -- create index main_iclabel_index on main ( iclabel );
  -- create index main_glyph_index on main ( glyph );
  create index main_csg_index   on main ( csg );
  create index main_rsg_index   on main ( rsg );

-- ---------------------------------------------------------------------------------------------------------
query read_codepoint_records():         select *              from main;
query read_codepoint_records( limit ):  select *              from main limit $limit;
query read_iclabels_and_glyphs():       select glyph, iclabel from main;


-- =========================================================================================================
-- FONTNICKS
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_fontnicks_first():
  drop view   if exists outlines_of_sourcefonts;
  drop table  if exists _outlines_of_sourcefonts;
  drop table  if exists fontnicks;
  -- .......................................................................................................
  create table fontnicks (
    fontnick    text    not null,
    filename    text    not null,
    filepath    text    not null,
    filesize    integer not null,
    otf         text,
    primary key ( fontnick ) );
  insert into fontnicks ( fontnick, filename, filepath, filesize, otf ) values
fragment create_table_fontnicks_middle( fontnick, filename, filepath, filesize, otf ):
  ( $fontnick, $filename, $filepath, $filesize, $otf )

-- ---------------------------------------------------------------------------------------------------------
query walk_fontnick_table():
  select * from fontnicks order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query filepath_from_fontnick( fontnick ):
  select filepath from fontnicks where fontnick = $fontnick;

-- ---------------------------------------------------------------------------------------------------------
query fontnicks_with_outlines():
  select distinct
      fontnick
    from all_outlines
    order by fontnick;



-- =========================================================================================================
-- OUTLINES
-- ---------------------------------------------------------------------------------------------------------
procedure create_table_contents():
  drop table if exists contents;
  create table contents (
    hash    text    not null  unique,
    content text    not null  unique,
    primary key ( hash ),
    -- ### TAINT should use regex to check string content
    -- ### TAINT magic number 17 (length of sha1sum)
    check ( length( hash ) = 17 ) );

-- ---------------------------------------------------------------------------------------------------------
procedure create_table_outlines():
  drop table if exists _outlines_of_sourcefonts;
  create table _outlines_of_sourcefonts (
    /*  NOTE: we use `iclabel`, not `glyph` or `cid` as primary key because in theory neither of the latter
        two is capable of expressing codepoints outside of Unicode. */
    iclabel           text    not null  references main       ( iclabel  ),
    fontnick          text    not null  references fontnicks  ( fontnick ),
    outline_json_hash text    not null  references contents   ( hash     ),
    primary key ( iclabel, fontnick ) );

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT as in main etc, above, the insertion parts can be derived mechanically from the table
-- definition; as its stands, they're mere noise / code duplication:
fragment insert_into_outlines_first(): insert into _outlines_of_sourcefonts ( iclabel, fontnick, outline_json_hash ) values
fragment insert_into_outlines_middle( iclabel, fontnick, outline_json_hash ): ( $iclabel, $fontnick, $outline_json_hash )
fragment insert_into_contents_first(): insert into contents ( hash, content ) values
fragment insert_into_contents_middle( hash, content ): ( $hash, $content )

-- ---------------------------------------------------------------------------------------------------------
procedure finalize_outlines():
  drop view if exists outlines_of_sourcefonts;
  -- .......................................................................................................
  create view outlines_of_sourcefonts as select
      iclabel                 as iclabel,
      fontnick                as fontnick,
      outline_json_hash       as outline_json_hash,
      CO.content              as outline_json
    from _outlines_of_sourcefonts as OL
    join contents                 as CO on ( OL.outline_json_hash = CO.hash )
    order by iclabel, fontnick;
  -- .......................................................................................................
  create index outlines_fontnick_index          on _outlines_of_sourcefonts ( fontnick          );
  create index outlines_outline_json_hash_index on _outlines_of_sourcefonts ( outline_json_hash );
  -- recommended by sqlite> .lint fkey-indexes
  -- CREATE INDEX 'outlines_outline_json_hash' ON 'outlines_of_sourcefonts'('outline_json_hash'); --> contents(hash)
  -- CREATE INDEX 'outlines_fontnick' ON 'outlines_of_sourcefonts'('fontnick'); --> fontnicks(fontnick)


-- ---------------------------------------------------------------------------------------------------------
query outline_json_from_cid( fontnick, cid ):
  select
      outline_json
    from outlines_of_sourcefonts  as OL
    join main                     as MN using ( iclabel )
    where true
      and MN.cid      = $cid
      and OL.fontnick = $fontnick
    limit 1;

-- ---------------------------------------------------------------------------------------------------------
query outline_json_from_glyph( fontnick, glyph ):
  select
      outline_json
    from outlines_of_sourcefonts  as OL
    join main                     as MN using ( iclabel )
    where true
      and MN.glyph    = $glyph
      and OL.fontnick = $fontnick
    limit 1;

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT this will have to be promoted to a query and the `?glyphs?` ad-hoc placeholder to be
-- replaced by sth like `$tuple:glyphs` as soon as ICQL has been updated
fragment outline_json_from_glyphs( fontnick, glyphs, n ):
  select
      MN.iclabel              as iclabel,
      MN.cid                  as cid,
      MN.glyph                as glyph,
      OL.outline_json         as outline_json,
      OL.outline_nr           as outline_nr,
      OL.shared_outline_count as shared_outline_count
    from all_outlines as OL
    -- join contents as CO on ( OL.outline_json_hash = CO.hash )
    join main    as MN using ( iclabel       )
    where true
      and MN.glyph    in ?glyphs?
      and OL.fontnick = $fontnick
    limit $n;

-- ---------------------------------------------------------------------------------------------------------
query configured_fontnicks_and_files():
  select
      fontnick,
      filename,
      otf
    from cfg_fontnicks_and_files
    order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query fontnicks():
  select
      fontnick
    from fontnicks
    order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query false_fallback_probe_from_fontnick( fontnick ):
  select
      fontnick,
      probe
    from cfg_fontnick_and_false_fallbacks
    where fontnick = $fontnick;

-- ---------------------------------------------------------------------------------------------------------
query read_cfg_styles_codepoints_and_fontnicks():
  select * from cfg_styles_codepoints_and_fontnicks order by linenr;

-- ---------------------------------------------------------------------------------------------------------
query read_cfg_rsgs_and_blocks():
  select * from cfg_rsgs_and_blocks order by linenr;

-- ---------------------------------------------------------------------------------------------------------
procedure prepare_cfg_tables():
  -- ### TAINT would be better to set up all columns in table definition
  -- .......................................................................................................
  alter table cfg_rsgs_and_blocks rename column range to range_txt;
  alter table cfg_rsgs_and_blocks add column first_cid integer not null default -1;
  alter table cfg_rsgs_and_blocks add column last_cid  integer not null default -1;
  -- .......................................................................................................
  alter table cfg_styles_codepoints_and_fontnicks rename column ranges to range_txt;
  alter table cfg_styles_codepoints_and_fontnicks add column first_cid        integer   not null default -1;
  alter table cfg_styles_codepoints_and_fontnicks add column last_cid         integer   not null default -1;
  alter table cfg_styles_codepoints_and_fontnicks add column glyphstyle_glyph text      default null;
  alter table cfg_styles_codepoints_and_fontnicks add column glyphstyle_push  float     default null;
  alter table cfg_styles_codepoints_and_fontnicks add column glyphstyle_raise float     default null;
  alter table cfg_styles_codepoints_and_fontnicks add column glyphstyle_scale float     default null;

-- ---------------------------------------------------------------------------------------------------------
procedure update_cfg_rsgs_and_blocks( linenr, first_cid, last_cid ):
  update cfg_rsgs_and_blocks
    set ( first_cid, last_cid ) = ( $first_cid, $last_cid )
    where linenr = $linenr;

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT boilerplate
procedure update_cfg_styles_codepoints_and_fontnicks( linenr, first_cid, last_cid ):
  update cfg_styles_codepoints_and_fontnicks
    set ( first_cid, last_cid ) = ( $first_cid, $last_cid )
    where linenr = $linenr;

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT boilerplate
procedure update_cfg_styles_codepoints_and_fontnicks( linenr, first_cid, last_cid, glyphstyle_glyph, glyphstyle_push, glyphstyle_raise, glyphstyle_scale ):
  update cfg_styles_codepoints_and_fontnicks
    set ( first_cid, last_cid,   glyphstyle_glyph,  glyphstyle_push,  glyphstyle_raise,  glyphstyle_scale ) =
       ( $first_cid, $last_cid, $glyphstyle_glyph, $glyphstyle_push, $glyphstyle_raise, $glyphstyle_scale )
    where linenr = $linenr;

-- ---------------------------------------------------------------------------------------------------------
procedure finalize_cfg_tables():
  create index cfg_rsgs_first_cid_index     on cfg_rsgs_and_blocks ( first_cid  );
  create index cfg_rsgs_last_cid_index      on cfg_rsgs_and_blocks ( last_cid   );
  create index cfg_rsgs_rsg_index           on cfg_rsgs_and_blocks ( rsg        );
  create index cfg_rsgs_blockname_index     on cfg_rsgs_and_blocks ( blockname  );
  create index cfg_rsgs_icgroup_index       on cfg_rsgs_and_blocks ( icgroup    );
  -- .......................................................................................................
  create index cfg_styles_styletag_index    on cfg_styles_codepoints_and_fontnicks ( styletag  );
  create index cfg_styles_fontnick_index    on cfg_styles_codepoints_and_fontnicks ( fontnick  );
  create index cfg_styles_first_cid_index   on cfg_styles_codepoints_and_fontnicks ( first_cid );
  create index cfg_styles_last_cid_index    on cfg_styles_codepoints_and_fontnicks ( last_cid  );

-- ---------------------------------------------------------------------------------------------------------
query cidrange_from_rsg( rsg ):
  select
      first_cid,
      last_cid
    from cfg_rsgs_and_blocks
    where rsg = $rsg
    limit 1;



-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
procedure create_view_combifonts():
  drop view if exists all_outlines;
  drop view if exists combifont_missing_outlines_as_cid_ranges;
  drop view if exists combifont_missing_outlines;
  drop view if exists outlines_of_combifonts;
  drop view if exists combifonts;
  drop view if exists all_glyphs_and_stylerules;
  -- .......................................................................................................
  create view all_glyphs_and_stylerules as select
      *
    from main as MN
    join cfg_styles_codepoints_and_fontnicks as CS on ( MN.cid between CS.first_cid and CS.last_cid )
    -- where MN.is_u9cjkidg
    order by MN.iclabel, CS.linenr;
  -- .......................................................................................................
  -- thx to https://stackoverflow.com/a/8749095
  -- The `left outer join` solves the 'biggest x in subgroup' problem more efficiently than alternative
  -- formulations with sub-`select`s provided there are proper indexes in the referenced tables.
  create view combifonts as select
      V1.linenr           as linenr,
      V1.iclabel          as iclabel,
      V1.styletag         as styletag,
      V1.fontnick         as fontnick,
      V1.glyphstyle       as glyphstyle,
      V1.glyphstyle_glyph as glyphstyle_glyph,
      V1.glyphstyle_push  as glyphstyle_push,
      V1.glyphstyle_raise as glyphstyle_raise,
      V1.glyphstyle_scale as glyphstyle_scale
    from all_glyphs_and_stylerules as V1
    left outer join all_glyphs_and_stylerules as V2 on ( true
      and V1.iclabel  = V2.iclabel
      and V1.styletag = V2.styletag
      and V1.linenr   < V2.linenr )
    where V2.linenr is null
    order by iclabel, styletag;
  -- .......................................................................................................
  create view outlines_of_combifonts as select
      *
    from      combifonts                 as CF
    left join outlines_of_sourcefonts   as OL using ( iclabel, fontnick );
  -- .......................................................................................................
  create view combifont_missing_outlines as select
      OL.linenr                 as linenr,
      OL.iclabel                as iclabel,
      MN.cid                    as cid,
      OL.styletag               as styletag,
      OL.fontnick               as fontnick,
      OL.outline_json_hash      as outline_json_hash
    from outlines_of_combifonts as OL
    join main               as MN using ( iclabel )
    where outline_json_hash is null
    order by OL.fontnick, OL.iclabel, OL.styletag;
  -- .......................................................................................................
  create view combifont_missing_outlines_as_cid_ranges as with V1 as ( select
      -- row_number() over ( order by id ) - id as group_id,
      dense_rank() over ( order by cid ) - cid      as group_id,
      linenr                                        as linenr,
      cid                                           as cid,
      iclabel                                       as iclabel,
      styletag                                      as styletag,
      fontnick                                      as fontnick,
      outline_json_hash                             as outline_json_hash
    from combifont_missing_outlines ), V2 as ( select
      V1.linenr                                     as linenr,
      min( V1.cid )                                 as first_cid,
      max( V1.cid )                                 as last_cid,
      V1.styletag                                   as styletag,
      V1.fontnick                                   as fontnick,
      V1.outline_json_hash                          as outline_json_hash
    from V1
    group by V1.group_id
    order by first_cid )
    select
      V2.linenr                                     as linenr,
      -- V2.first_cid                                  as first_cid,
      -- V2.last_cid                                   as last_cid,
      MF.iclabel                                    as first_iclabel,
      ML.iclabel                                    as last_iclabel,
      V2.styletag                                   as styletag,
      V2.fontnick                                   as fontnick,
      V2.outline_json_hash                          as outline_json_hash
    from V2
    join main as MF on ( V2.first_cid = MF.cid )
    join main as ML on ( V2.last_cid  = ML.cid );

-- ---------------------------------------------------------------------------------------------------------
procedure create_view_all_outlines():
  drop view if exists _all_outlines;
  drop view if exists all_outlines;
  create view _all_outlines as select
      'sourcefont'                                  as type,
      OL.iclabel                                    as iclabel,
      OL.fontnick                                   as fontnick,
      OL.outline_json_hash                          as outline_json_hash,
      OL.outline_json                               as outline_json
    from outlines_of_sourcefonts as OL
    union all select
      'combifont'                                   as type,
      CO.iclabel                                    as iclabel,
      CO.styletag                                   as fontnick,
      CO.outline_json_hash                          as outline_json_hash,
      CO.outline_json                               as outline_json
    from outlines_of_combifonts as CO
    where CO.outline_json is not null
    order by iclabel, fontnick;
  -- .......................................................................................................
  create view all_outlines as select
      OL.iclabel                                    as iclabel,
      OL.fontnick                                   as fontnick,
      dense_rank()  over drw                        as outline_nr,
      count(*)      over cw                         as shared_outline_count,
      OL.outline_json_hash                          as outline_json_hash,
      OL.outline_json                               as outline_json
    from _all_outlines as OL
    window drw as ( partition by OL.iclabel
      order by OL.outline_json_hash ),
    cw as ( partition by OL.iclabel, OL.outline_json_hash
      order by OL.outline_json_hash )
    order by iclabel, fontnick;

  -- -- .......................................................................................................
  -- create view duplicate_outlines as with v1 as ( select
  --     OL.iclabel                as iclabel,
  --     OL.fontnick               as fontnick,
  --     count(*) over w           as count,
  --     OL.shared_outline_count   as shared_outline_count,
  --     OL.outline_nr             as outline_nr,
  --     OL.outline_json_hash      as outline_json_hash
  --   from outlines_of_sourcefonts as OL
  --   window w as ( partition by outline_json_hash
  --     range between unbounded preceding and unbounded following ) )
  --   select * from v1
  --   where v1.count > 1;
