
-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query sqlite_index_infos():
  select
      r1.type     as type,
      r1.name     as name,
      r1.tbl_name as tbl_name,
      ( select name from pragma_index_info( r1.name ) ) as col_name
    from sqlite_master as r1
    where type = 'index'
    order by name;"


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_main_first():
  drop table  if exists cpfrs;
  drop table  if exists variables;
  drop view   if exists duplicate_outlines;
  drop view   if exists outlines;
  drop table  if exists _outlines;
  drop view   if exists main;
  drop table  if exists _main_fallback;
  drop table  if exists _main;
  -- .......................................................................................................
  create table variables (
    key     text        not null  unique,
    value   json        not null,
    primary key ( key ) );
  -- .......................................................................................................
  create table cpfrs (
    cpfr        text        not null  unique,
    first_cid   integer     not null  unique,
    last_cid    integer     not null  unique,
    comment     text        not null,
    primary key ( cpfr ) );
  insert into cpfrs ( cpfr, first_cid, last_cid, comment ) values
    ( 'cpfr-cjka', 0x00000, 0x0ffff, 'Ideographs etc. in Unicode BMP' ),
    ( 'cpfr-cjkb', 0x20000, 0x2a6ff, 'CJK Ideographs Extension B' ),
    ( 'cpfr-cjkc', 0x2a700, 0x3ffff, 'CJK Ideographs beyond Extension B' );
  -- .......................................................................................................
  create table _main (
    iclabel     text    not null  unique,
    glyph       text    not null  unique,
    cid         integer not null  unique,
    is_u9cjkidg boolean not null,
    tags        text    not null,
    csg         text    not null,
    rsg         text    not null,
    fncr        text    not null,
    sfncr       text    not null,
    ncr         text    not null,
    xncr        text    not null,
    fontnick    text    not null,
    style       json,
    -- tex_block   text    not null,
    -- tex_glyph   text,
    primary key ( iclabel ) );
  -- .......................................................................................................
  create table _main_fallback (
    iclabel     text    unique default null,
    glyph       text    unique default null,
    cid         integer unique default null,
    is_u9cjkidg boolean unique default null,
    tags        text    unique default null,
    csg         text    unique default null,
    rsg         text    unique default null,
    fncr        text    unique default null,
    sfncr       text    unique default null,
    ncr         text    unique default null,
    xncr        text    unique default null,
    fontnick    text    unique not null,
    style       json    unique not null,
    -- tex_block   text    not null,
    -- tex_glyph   text,
    check (
      iclabel       is null and
      glyph         is null and
      cid           is null and
      is_u9cjkidg   is null and
      tags          is null and
      csg           is null and
      rsg           is null and
      fncr          is null and
      sfncr         is null and
      ncr           is null and
      xncr          is null ) );
  create view main as select * from _main union all select * from _main_fallback;
  insert into _main (
    iclabel,
    glyph, cid, is_u9cjkidg, tags,
    csg, rsg,
    fncr, sfncr, ncr, xncr,
    fontnick, style ) values
fragment create_table_main_middle( iclabel, glyph, cid, is_u9cjkidg, tags, csg, rsg, fncr, sfncr, ncr, xncr, fontnick, style ):
  ( $iclabel, $glyph, $cid, $is_u9cjkidg, $tags, $csg, $rsg, $fncr, $sfncr, $ncr, $xncr, $fontnick, $style )

-- ---------------------------------------------------------------------------------------------------------
procedure insert_fallback( fontnick, style ):
  insert into _main_fallback ( fontnick, style ) values ( $fontnick, $style );


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
procedure create_main_indexes():
  -- create index main_iclabel_index on _main ( iclabel );
  -- create index main_glyph_index on _main ( glyph );
  create index main_csg_index   on _main ( csg );
  create index main_rsg_index   on _main ( rsg );


-- =========================================================================================================
-- FONTNICKS
-- ---------------------------------------------------------------------------------------------------------
fragment create_table_fontnicks_first():
  drop view   if exists outlines;
  drop table  if exists _outlines;
  drop table  if exists fontnicks;
  -- .......................................................................................................
  create table fontnicks (
    fontnick    text    not null,
    filename    text    not null,
    filepath    text    not null,
    filesize    integer not null,
    otf         text,
    primary key ( fontnick ) );
  insert into fontnicks ( fontnick, filename, filepath, filesize, otf ) values
fragment create_table_fontnicks_middle( fontnick, filename, filepath, filesize, otf ):
  ( $fontnick, $filename, $filepath, $filesize, $otf )

-- ---------------------------------------------------------------------------------------------------------
query walk_fontnick_table():
  select * from fontnicks order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query filepath_from_fontnick( fontnick ):
  select filepath from fontnicks where fontnick = $fontnick;

-- ---------------------------------------------------------------------------------------------------------
query fontnicks_with_outlines():
  select distinct
      fontnick
    from outlines
    order by fontnick;


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query count_lines():
  select count(*) from main;

-- ---------------------------------------------------------------------------------------------------------
query read_lines():
  select
      *
    from main
    -- order by vnr_blob
    ;


-- =========================================================================================================
-- OUTLINES
-- ---------------------------------------------------------------------------------------------------------
procedure create_table_contents():
  drop table if exists contents;
  create table contents (
    hash    text    not null  unique,
    content text    not null  unique,
    primary key ( hash ),
    -- ### TAINT should use regex to check string content
    -- ### TAINT magic number 17 (length of sha1sum)
    check ( length( hash ) = 17 ) );

-- ---------------------------------------------------------------------------------------------------------
procedure create_table_outlines():
  drop table if exists _outlines;
  create table _outlines (
    /*  NOTE: we use `iclabel`, not `glyph` or `cid` as primary key because in theory neither of the latter
        two is capable of expressing codepoints outside of Unicode. */
    iclabel           text    not null  references _main      ( iclabel  ),
    fontnick          text    not null  references fontnicks  ( fontnick ),
    outline_nr        integer, -- counts distinct outline variants per codepoint
    outline_json_hash text    not null  references contents   ( hash     ),
    primary key ( iclabel, fontnick ) );

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT as in main etc, above, the insertion parts can be derived mechanically from the table
-- definition; as its stands, they're mere noise / code duplication:
fragment insert_into_outlines_first(): insert into _outlines ( iclabel, fontnick, outline_json_hash ) values
fragment insert_into_outlines_middle( iclabel, fontnick, outline_json_hash ): ( $iclabel, $fontnick, $outline_json_hash )
fragment insert_into_contents_first(): insert into contents ( hash, content ) values
fragment insert_into_contents_middle( hash, content ): ( $hash, $content )

-- ---------------------------------------------------------------------------------------------------------
procedure finalize_outlines():
  drop view if exists duplicate_outlines;
  drop view if exists outlines;
  -- .......................................................................................................
  create view outlines as select
      iclabel                 as iclabel,
      fontnick                as fontnick,
      dense_rank()  over drw  as outline_nr,
      count(*)      over cw   as shared_outline_count,
      outline_json_hash       as outline_json_hash
    from _outlines
    window drw as ( partition by iclabel
      order by outline_json_hash ),
    cw as ( partition by iclabel, outline_json_hash
      order by outline_json_hash )
    order by iclabel, fontnick;
  -- .......................................................................................................
  create view duplicate_outlines as with v1 as ( select
      OL.iclabel                as iclabel,
      OL.fontnick               as fontnick,
      count(*) over w           as count,
      OL.shared_outline_count   as shared_outline_count,
      OL.outline_nr             as outline_nr,
      OL.outline_json_hash      as outline_json_hash
    from outlines as OL
    window w as ( partition by outline_json_hash
      range between unbounded preceding and unbounded following ) )
    select * from v1
    where v1.count > 1;
  -- .......................................................................................................
  create index outlines_fontnick_index          on _outlines ( fontnick          );
  create index outlines_outline_json_hash_index on _outlines ( outline_json_hash );
  -- recommended by sqlite> .lint fkey-indexes
  -- CREATE INDEX 'outlines_outline_json_hash' ON 'outlines'('outline_json_hash'); --> contents(hash)
  -- CREATE INDEX 'outlines_fontnick' ON 'outlines'('fontnick'); --> fontnicks(fontnick)


-- ---------------------------------------------------------------------------------------------------------
query outline_json_from_cid( fontnick, cid ):
  select
      CO.content    as outline_json
    from outlines as OL
    join contents as CO on ( OL.outline_json_hash = CO.hash )
    join _main    as MN using ( iclabel )
    where true
      and MN.cid      = $cid
      and OL.fontnick = $fontnick
    limit 1;

-- ---------------------------------------------------------------------------------------------------------
query outline_json_from_glyph( fontnick, glyph ):
  select
      CO.content    as outline_json
    from outlines as OL
    join contents as CO on ( OL.outline_json_hash = CO.hash )
    join _main    as MN using ( iclabel )
    where true
      and MN.glyph    = $glyph
      and OL.fontnick = $fontnick
    limit 1;

-- ---------------------------------------------------------------------------------------------------------
-- ### TAINT this will have to be promoted to a query and the `?glyphs?` ad-hoc placeholder to be
-- replaced by sth like `$tuple:glyphs` as soon as ICQL has been updated
fragment outline_json_from_glyphs( fontnick, glyphs, n ):
  select
      MN.glyph                as glyph,
      CO.content              as outline_json,
      OL.outline_nr           as outline_nr,
      OL.shared_outline_count as shared_outline_count
    from outlines as OL
    join contents as CO on ( OL.outline_json_hash = CO.hash )
    join _main    as MN using ( iclabel       )
    where true
      and MN.glyph    in ?glyphs?
      and OL.fontnick = $fontnick
    limit $n;

-- ---------------------------------------------------------------------------------------------------------
query configured_fontnicks_and_filenames():
  select
      fontnick,
      filename,
      otf
    from configuration_fontnicks_filenames_and_otf_features
    order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query fontnicks():
  select
      fontnick
    from fontnicks
    order by fontnick;

-- ---------------------------------------------------------------------------------------------------------
query false_fallback_probe_from_fontnick( fontnick ):
  select
      fontnick,
      probe
    from configuration_fontnick_and_false_fallbacks
    where fontnick = $fontnick;

-- ---------------------------------------------------------------------------------------------------------
query read_configuration_styles_codepoints_and_fontnicks():
  select * from configuration_styles_codepoints_and_fontnicks order by linenr;

-- ---------------------------------------------------------------------------------------------------------
query read_configuration_rsgs_and_blocks():
  select * from configuration_rsgs_and_blocks order by linenr;

-- ---------------------------------------------------------------------------------------------------------
procedure prepare_configuration_tables():
  -- ### TAINT would be better to set up all columns in table definition
  -- .......................................................................................................
  alter table configuration_rsgs_and_blocks rename column range to range_txt;
  alter table configuration_rsgs_and_blocks add column first_cid integer not null default -1;
  alter table configuration_rsgs_and_blocks add column last_cid  integer not null default -1;
  -- .......................................................................................................
  alter table configuration_styles_codepoints_and_fontnicks rename column ranges to range_txt;
  alter table configuration_styles_codepoints_and_fontnicks add column first_cid integer not null default -1;
  alter table configuration_styles_codepoints_and_fontnicks add column last_cid  integer not null default -1;

-- ---------------------------------------------------------------------------------------------------------
procedure update_configuration_rsgs_and_blocks( linenr, first_cid, last_cid ):
  update configuration_rsgs_and_blocks
    set ( first_cid, last_cid ) = ( $first_cid, $last_cid )
    where linenr = $linenr;

-- ---------------------------------------------------------------------------------------------------------
procedure update_configuration_styles_codepoints_and_fontnicks( linenr, first_cid, last_cid ):
  update configuration_styles_codepoints_and_fontnicks
    set ( first_cid, last_cid ) = ( $first_cid, $last_cid )
    where linenr = $linenr;

-- ---------------------------------------------------------------------------------------------------------
procedure finalize_configuration_tables():
  create index cfg_rsgs_first_cid_index     on configuration_rsgs_and_blocks ( first_cid  );
  create index cfg_rsgs_last_cid_index      on configuration_rsgs_and_blocks ( last_cid   );
  create index cfg_rsgs_rsg_index           on configuration_rsgs_and_blocks ( rsg        );
  create index cfg_rsgs_blockname_index     on configuration_rsgs_and_blocks ( blockname  );
  create index cfg_rsgs_icgroup_index       on configuration_rsgs_and_blocks ( icgroup    );
  -- .......................................................................................................
  create index cfg_styles_first_cid_index   on configuration_styles_codepoints_and_fontnicks ( first_cid );
  create index cfg_styles_last_cid_index    on configuration_styles_codepoints_and_fontnicks ( last_cid  );

-- ---------------------------------------------------------------------------------------------------------
query cidrange_from_rsg( rsg ):
  select
      first_cid,
      last_cid
    from configuration_rsgs_and_blocks
    where rsg = $rsg;


-- =========================================================================================================
--
-- ---------------------------------------------------------------------------------------------------------
query read_lines( limit ):
  select
      *
    from main
    -- order by vnr_blob
    limit $limit;

-- -- ---------------------------------------------------------------------------------------------------------
-- procedure create_view_main_with_deltas_etc():
--   drop view   if exists stages;
--   drop view   if exists _fontnick_priorities;
--   drop view   if exists _fontnick_boundaries_1;
--   drop view   if exists fontnick_boundaries;
--   drop view   if exists _main_with_deltas;
--   -- .......................................................................................................
--   create view _main_with_deltas as select
--       *,
--       -- iclabel                                           as iclabel,
--       -- csg                                               as csg,
--       -- cid                                               as cid,
--       -- lag(  cid, 1, 0x000000 )        over w1           as rear_cid,
--       -- lead( cid, 1, 0x10ffff )        over w1           as fore_cid,
--       cid - lag(  cid, 1, 0x000000 )  over w1           as rear_delta_cid,
--             lead( cid, 1, 0x10ffff )  over w1 - cid     as fore_delta_cid
--     from main
--     window w1 as ( partition by fontnick order by cid )
--     order by cid;
--   -- .......................................................................................................
--   create view _fontnick_boundaries_1 as with v1 as ( select
--         *
--       from _main_with_deltas
--       where ( rear_delta_cid != 1 ) or ( fore_delta_cid != 1 ) )
--     select
--         *,
--         case
--           when ( rear_delta_cid != 1 and fore_delta_cid != 1 )  then  'single'
--           when ( rear_delta_cid != 1 )                          then  'start'
--           else                                                        'stop' end      as boundary_type
--       from v1
--       order by cid;
--   -- .......................................................................................................
--   create view fontnick_boundaries as with v1 as ( select
--       *,
--       case
--         when boundary_type = 'start'  then  lead( cid, 1, null ) over ( order by cid )
--         when boundary_type = 'single' then  cid
--         else                                null end                                    as last_cid
--     from _fontnick_boundaries_1 )
--     select
--         v1.fontnick         as fontnick,
--         v1.cid              as first_cid,
--         v1.iclabel          as first_iclabel,
--         r2.cid              as last_cid,
--         r2.iclabel          as last_iclabel
--       from
--         v1
--         left join main as r2 on ( v1.last_cid = r2.cid )
--         where v1.boundary_type != 'stop'
--         order by v1.fontnick, v1.cid;
--   -- .......................................................................................................
--   create view _fontnick_priorities as select
--       fontnick                                as fontnick,
--       case fontnick
--         when 'sunexta'        then  100
--         when 'jizurathreeb'   then  900
--         else                        500 end   as priority
--     from fontnicks;
--   -- .......................................................................................................
--   create view stages as select
--       r1.fontnick                             as fontnick,
--       r4.cpfr                                 as cpfr,
--       dense_rank() over w                     as stagenr,
--       printf( 's%03d', dense_rank() over w )  as stagenick,
--       r3.priority                             as priority,
--       r1.first_cid                            as first_cid,
--       r1.last_cid                             as last_cid,
--       r1.first_iclabel                        as first_iclabel,
--       r1.last_iclabel                         as last_iclabel,
--       r2.filesize                             as filesize,
--       r2.filename                             as filename,
--       r2.filepath                             as filepath,
--       r2.otf                                  as otf
--     from      fontnick_boundaries   as r1
--     left join fontnicks             as r2 using ( fontnick )
--     left join _fontnick_priorities  as r3 using ( fontnick )
--     left join cpfrs                 as r4 on ( r1.first_cid >= r4.first_cid and r1.last_cid <= r4.last_cid )
--     window w as ( order by priority, filesize desc, fontnick )
--     order by r3.priority, filesize desc, fontnick
--     ;


-- -- ---------------------------------------------------------------------------------------------------------
-- query _main_with_deltas():    select * from _main_with_deltas;
-- query fontnick_boundaries():  select * from fontnick_boundaries;

-- -- ---------------------------------------------------------------------------------------------------------
-- query all_ranges_in_previous_stages( stagenr ):
--   select
--       r1.first_cid                            as first_cid,
--       r1.last_cid                             as last_cid,
--       r1.first_iclabel                        as first_iclabel,
--       r1.last_iclabel                         as last_iclabel,
--     from stages as r1
--     where true
--       and ( stagenr < $stagenr );






-- def _count_fontnicks_by_rsg():
--   query = """
--     with v1 as ( select distinct
--         rsg                     as rsg,
--         fontnick                as fontnick,
--         count(*) over w         as fontnick_count
--       from main
--       window w as ( partition by rsg, fontnick
--         /* range between unbounded preceding and unbounded following */ )
--       order by rsg, fontnick_count desc )
--     select
--       rsg                       as rsg,
--       fontnick                  as fontnick,
--       fontnick_count            as fontnick_count,
--       count(*) over w           as format_count
--     from v1
--       window w as ( partition by rsg )
--       order by format_count, rsg, fontnick_count desc
--       ;"""
