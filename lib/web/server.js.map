{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/web/server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB/WEB/SERVER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nFSP                       = FS.promises\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n{ walk_cids_in_cid_range\n  cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require '../helpers'\n#...........................................................................................................\n@types                    = require '../types'\n{ isa\n  validate\n  declare\n  cast\n  size_of\n  last_of\n  type_of }               = @types\n#...........................................................................................................\n_glob                     = require 'glob'\nglob                      = ( require 'util' ).promisify _glob\nPD                        = require 'pipedreams'\n{ $\n  $async\n  $watch\n  $show  }                = PD.export()\n#...........................................................................................................\nKoa                       = require 'koa'\nHTTP                      = require 'http'\nroot_router               = ( new require 'koa-router' )()\nserve                     = require 'koa-static'\n#...........................................................................................................\nO                         = @O = {}\ndo =>\n  O.port          = 8080\n  O.db_path       = db_path = project_abspath '../benchmarks/assets/ucdb/ucdb.db'\n  O.ucdb          = ( require '../..' ).new_ucdb { db_path, }\n  O.max_age       = 604800\n  O.cache_control = \"max-age=#{O.max_age}\"\n#...........................................................................................................\nTIMER                     = require '../timer'\nTEMPLATES                 = require './templates'\nCOMMON                    = require './common'\nHELPERS                   = require '../helpers'\nLRRR                      = require 'omicron-persei-8'\n\n#-----------------------------------------------------------------------------------------------------------\n@_show_available_addresses = ->\n  network_interfaces = ( require 'os' ).networkInterfaces()\n  help \"serving on addresses:\"\n  for device, ifcs of network_interfaces\n    for ifc in ifcs\n      if ifc.family is 'IPv6'\n        info CND.blue   \"* http://[#{ifc.address}]:#{O.port}/\"\n      else\n        info CND.yellow \"* http://#{ifc.address}:#{O.port}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@serve = ->\n  app     = new Koa()\n  server  = HTTP.createServer app.callback()\n  server.listen O.port\n  @_show_available_addresses()\n  #.........................................................................................................\n  root_router.get 'root',                         '/',                            @$new_page 'inventory'\n  root_router.get 'long_samples_overview',        '/long-samples-overview',       @$new_page 'long_samples_overview'\n  root_router.get 'slugs',                        '/slugs',                       @$new_page 'slugs'\n  root_router.get 'grid',                         '/grid',                        @$new_page 'grid'\n  root_router.get 'dump',                         '/dump',                        @$dump()\n  root_router.get 'harfbuzz',                     '/harfbuzz',                    @$new_page 'harfbuzz'\n  root_router.get 'v2/font',                      '/v2/font',                     @$v2_font()\n  root_router.get 'v2_glyphimg',                  '/v2/glyphimg',                 @$v2_glyphimg()\n  root_router.get 'v2_slug',                      '/v2/slug',                     @$v2_slug()\n  root_router.get 'v2_fontnicks',                 '/v2/fontnicks',                @$v2_fontnicks()\n  root_router.get 'v2_glyphsamples',              '/v2/glyphsamples/:fontnick',   @$v2_glyphsamples()\n  root_router.get 'v2_harfbuzz_opentypejs_slug',  '/v2/harfbuzz-opentypejs-slug', @$v2_harfbuzz_opentypejs_slug()\n  app\n    # .use $time_request()\n    .use $echo()\n    .use serve ( project_abspath './public' ) #, { maxage: O.max_age, }\n    .use root_router.allowedMethods()\n    .use root_router.routes()\n  return app\n\n\n#===========================================================================================================\n# MIDDLEWARE\n#-----------------------------------------------------------------------------------------------------------\n$time_request = -> ( ctx, next ) =>\n  dt_ms = await TIMER.stopwatch_async -> await next()\n  ctx.set 'X-Response-Time', \"#{dt_ms}ms\"\n  ctx.set 'X-Cats', \"LoL\"\n  # ctx.body = '(((' + ctx.body + ')))'\n  # ctx.body = ctx.body + \"\\nResponse time #{dt_ms}ms\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$echo = -> ( ctx, next ) =>\n  href = ctx.request.URL.href\n  if href.length > 108  then  info CND.grey href[ .. 105 ] + '...'\n  else                        info CND.grey href\n  await next()\n  return null\n\n\n#===========================================================================================================\n# ENDPOINTS\n#-----------------------------------------------------------------------------------------------------------\n@$new_page = ( template_name ) => ( ctx ) =>\n  ctx.type = 'html'\n  ctx.body = TEMPLATES[ template_name ] ctx\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$root = => ( ctx ) =>\n#   ctx.type = 'html'\n#   ### TAINT should cache ###\n#   ctx.body = TEMPLATES.inventory()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$long_samples_overview = => ( ctx ) =>\n#   ctx.type = 'html'\n#   ### TAINT should cache ###\n#   ctx.body = TEMPLATES.long_samples_overview()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$dump = => ( ctx ) =>\n  # ctx.type = 'html'\n  rows = [ O.ucdb.db.read_codepoint_records()..., ]\n  rows = ( row.glyph for row in rows when row.cid > 0x20 ).join ''\n    # debug '^4443^', row\n  ctx.body = rows\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_fontnicks = => ( ctx ) =>\n  debug '^ucdb/web/server@2458337^', 'ctx.query:', ctx.query\n  ctx.body = ( row.fontnick for row from O.ucdb.db.fontnicks() )\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  ctx.body = [\n    'sunexta'\n    'nanumgothic'\n    'nanummyeongjo'\n  ]\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nsample_glyphs = Array.from ( \"\"\"\n  一二三四鼎深國令狐但卻\n  \"\"\".replace /\\s+/g, '' )\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_glyphsamples = => ( ctx ) =>\n  ### TAINT code duplication ###\n  ### TAINT use wrappers or similar to abstract away error handling ###\n  # debug '^66777^', H.SQL_generate_values_tuple sample_glyphs\n  process.exit 100\n  ctx.body = ( row.fontnick for row from O.ucdb.db.fontnicks() )\n  TEMPLATES.render_glyph_img fontnick, glyph\n\n  for glyph in sample_glyphs\n    fontnick  = ctx.params.fontnick ? 'sunexta'\n    pathdata  = pathdata_from_glyph fontnick, glyph\n    svg       = SVG.glyph_from_pathdata pathdata\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_glyphimg = => ( ctx ) =>\n  ### TAINT code duplication ###\n  ### TAINT use wrappers or similar to abstract away error handling ###\n  # debug '^676734^ query:', jr ctx.query\n  # debug '^676734^ parameters:', jr ctx.params\n  #.........................................................................................................\n  glyph     = ctx.query.glyph     ? '流'\n  fontnick  = ctx.query.fontnick  ? 'sunexta'\n  pathdata  = await pathdata_from_glyph fontnick, glyph\n  # ctx.set 'Cache-Control', O.cache_control ### TAINT use middleware to set cache control? ###\n  #.........................................................................................................\n  unless pathdata?\n    ctx.status  = 302\n    ctx.type    = '.txt'\n    # ctx.set 'location', '/fallback-glyph.svg'\n    ctx.set 'location', '/fallback-glyph.png'\n    return null\n  #.........................................................................................................\n  ctx.set 'content-type', 'image/svg+xml'\n  ctx.body  = SVG.glyph_from_pathdata pathdata\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_slug = => ( ctx ) =>\n  ### TAINT code duplication ###\n  ### TAINT use wrappers or similar to abstract away error handling ###\n  # debug '^676734^ query:', jr ctx.query\n  # debug '^676734^ parameters:', jr ctx.params\n  #.........................................................................................................\n  text          = ctx.query.text      ? '無此列文'\n  glyphs        = Array.from new Set text\n  fontnick      = ctx.query.fontnick  ? 'sunexta'\n  pathdatamap   = pathdatamap_from_glyphs fontnick, glyphs\n  svg           = SVG.slug_from_pathdatamap fontnick, glyphs, pathdatamap\n  ########################################################\n  # ctx.set 'Cache-Control', O.cache_control ### TAINT use middleware to set cache control? ###\n  ctx.set 'content-type', 'image/svg+xml'\n  ctx.body = svg\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_harfbuzz_opentypejs_slug = => ( ctx ) =>\n  ### TAINT code duplication ###\n  ### TAINT use wrappers or similar to abstract away error handling ###\n  # debug '^676734^ query:', ctx.query\n  # debug '^676734^ parameters:', jr ctx.params\n  #.........................................................................................................\n  text          = ctx.query.text      ? '無此列文 no such text'\n  glyphs        = Array.from new Set text\n  fontnick      = ctx.query.fontnick  ? 'sunexta'\n  pathdatamap   = pathdatamap_from_glyphs fontnick, glyphs\n  svg           = SVG.slug_from_pathdatamap fontnick, glyphs, pathdatamap\n  DB            = require '../../intershop/intershop_modules/db'\n  # debug ( k for k of DB )\n  ########################################################\n  # ctx.set 'Cache-Control', O.cache_control ### TAINT use middleware to set cache control? ###\n  ctx.set 'content-type', 'image/svg+xml'\n  ctx.body = svg\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$v2_font = => ( ctx ) =>\n  DB            = require '../../intershop/intershop_modules/db'\n  # ctx.set 'Cache-Control', O.cache_control ### TAINT use middleware to set cache control? ###\n  fid           = ctx.query?.fid\n  #.........................................................................................................\n  unless isa.ucdb_font_id fid\n    ctx.status  = 400\n    ctx.type    = '.txt'\n    # ctx.set 'content-type', 'text/plain'\n    ctx.body    = \"not a valid font ID: #{rpr fid}\"\n    return null\n  #.........................................................................................................\n  query         = [ \"select line from HARFBUZZ_X.get_svg_font_lines( $1 ) as x ( line );\", fid, ]\n  ctx.set 'content-type', 'image/svg+xml'\n  readstream    = await DB.query_as_readstream query\n  ctx.body      = readstream.pipe LRRR.remit ( d, send ) -> send \"#{d.line}\\n\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\npathdata_from_glyph = ( fontnick, glyph ) ->\n  validate.ucdb_glyph glyph\n  rows = [ ( O.ucdb.db.outline_json_from_glyph { fontnick, glyph, } )..., ]\n  return null unless rows.length is 1\n  return _pathdata_from_outline_row rows[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n_pathdata_from_outline_row = ( row ) -> ( JSON.parse row.outline_json ).pathdata\n\n#-----------------------------------------------------------------------------------------------------------\npathdatamap_from_glyphs = ( fontnick, glyphs ) ->\n  ### TAINT query procedure to be updated as soon as ICQL knows hoe to serialize value tuples ###\n  n               = glyphs.length\n  glyphs_tuple    = HELPERS.SQL_generate_values_tuple glyphs\n  sql_template    = O.ucdb.db.outline_json_from_glyphs { fontnick, glyphs, n, }\n  ### NOTE using a function with constant return value to keep JS from expanding `$`s in replacement string;\n  see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace ###\n  sql             = sql_template.replace /\\?glyphs\\?/g, -> glyphs_tuple\n  ### TAINT should do this in DB (?) ###\n  ### TAINT make this transformation a method ###\n  R               = {}\n  for row from O.ucdb.db.$.query sql\n    { iclabel\n      cid\n      outline_nr\n      shared_outline_count  } = row\n    pathdata                  = _pathdata_from_outline_row row\n    cid_hex                   = cid.toString 16\n    R[ row.glyph ]            = { iclabel, cid, cid_hex, pathdata, outline_nr, shared_outline_count, }\n  return R\n\n\n############################################################################################################\n# ### TAINT SVG generation temporarily placed here; might move to templates with future version\n# of coffeenode-teacup\n#-----------------------------------------------------------------------------------------------------------\nSVG = {}\n\n#-----------------------------------------------------------------------------------------------------------\nSVG.glyph_from_pathdata = ( pathdata ) ->\n  return \"\"\"<?xml version='1.0' standalone='no'?>\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 -800 4096 4896'>\n    <path transform='scale( 1 -1 ) translate( 0 -3296 )' d='#{pathdata}'/>\n    </svg>\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\nSVG.slug_from_pathdatamap = ( fontnick, glyphs, pathdatamap ) ->\n  x0          = 0\n  x           = 0\n  advance_x   = 4096 ### TAINT magic number, should be derived ###\n  glyph_count = glyphs.length\n  width       = x0 + advance_x * glyph_count\n  R           = ''\n  R          += \"<?xml version='1.0' standalone='no'?>\"\n  # R          += \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='#{x0} -800 #{width} 4896'>\"\n  R          += \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='#{x0} -800 #{width} 4996'>\"\n  R          += \"<style>\"\n  R          += \".olnr {\"\n  R          += \" fill: #800;\"\n  R          += \" font-family: helvetica;\"\n  R          += \" font-size: 1500px; }\"\n  R          += \".cidx {\"\n  R          += \" fill: #30f;\"\n  R          += \" font-family: monospace;\"\n  R          += \" font-size: 800px; }\"\n  R          += \"</style>\"\n  ### insert blank pathdata for missing glyphs ###\n  # blank                           = 'M 0 0 L 4000 4000 L 4096 4000 96 0 Z'\n  # blank                           = ''\n  # blank                           = 'M 50 50 L 4046 50 4046 4046 50 4046 Z'\n  # return ( ( pathdata_by_glyph[ glyph ] ? blank ) for glyph in glyphs )\n  #.........................................................................................................\n  for glyph in glyphs\n    entry = pathdatamap[ glyph ]\n    #.......................................................................................................\n    if entry?\n      { iclabel\n        cid\n        cid_hex\n        pathdata\n        outline_nr\n        shared_outline_count } = entry\n      R += \"<path transform='scale( 1 -1 ) translate( #{x} -3296 )' d='#{pathdata}'/>\"\n      if shared_outline_count > 1\n        # urge '^ucdb/server@8931^', fontnick, glyph, shared_outline_count\n        push  = Math.floor x + advance_x * 0.9 + 0.5\n        R    += \"<text class='olnr' x='#{push}' y='4296'>#{outline_nr}</text>\"\n      push  = Math.floor x + 500\n      R    += \"<text class='cidx' x='#{push}' y='4296'>#{cid_hex}</text>\"\n    #.......................................................................................................\n    else\n      ### add fallback glyph ###\n      R += \"<path transform='scale( 1 -1 ) translate( #{x} -3296 )' d='M 600 -550 L 3446 -550 3446 3546 600 3546 Z' fill='rgba(100,100,0,0.2)'/>\"\n      cid_hex = ( glyph.codePointAt 0 ).toString 16\n      push    = Math.floor x + 500\n      R      += \"<text class='cidx' x='#{push}' y='4296'>#{cid_hex}</text>\"\n    #.......................................................................................................\n    x += advance_x\n  #.........................................................................................................\n  R          += \"</svg>\"\n  return R\n\n\n############################################################################################################\nif module is require.main then do =>\n  @serve()\n  # DB            = require '../../intershop/intershop_modules/db'\n  # for row in await DB.query \"select * from CATALOG.catalog;\"\n  #   debug '^3337^', row\n\n\n"
  ]
}