{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/web/server-restart.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB/WEB/SERVER-RESTART'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nINotifyWait               = require 'inotifywait-spawn'\nNOTIFIER                  = require 'node-notifier'\nrespawn                   = require 'respawn'\n{ project_abspath, }      = require '../helpers'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nprocess_supervisor        = null\nfile_watcher              = null\ndefer                     = setImmediate\n#-----------------------------------------------------------------------------------------------------------\nINotifyWait               = require 'inotifywait-spawn'\n{ IN_ACCESS         # on file access\n  IN_MODIFY         # on changes\n  IN_CLOSE_WRITE    # on end writing\n  IN_CLOSE_NOWRITE  # on end reading\n  IN_OPEN           # on file opened\n  IN_MOVED_FROM     # on files moved from\n  IN_MOVED_TO       # on files move to\n  IN_CREATE         # on files creation (folder)\n  IN_DELETE         # on deletion (folder)\n  IN_DELETE_SELF    # on deletion of the watched path\n  IN_MOVE_SELF      # when watched path is moved\n  IN_UNMOUNT        # on patsh unmounted\n  IN_CLOSE          # on either IN_CLOSE_WRITE or IN_CLOSE_NOWRITE\n  IN_MOVE           # on either IN_MOVED_FROM or IN_MOVED_TO\n  }                       = INotifyWait;\nALL = IN_ACCESS | IN_MODIFY | IN_CLOSE_WRITE | IN_CLOSE_NOWRITE | IN_OPEN | IN_MOVED_FROM | IN_MOVED_TO | \\\n  IN_CREATE | IN_DELETE | IN_DELETE_SELF | IN_MOVE_SELF | IN_UNMOUNT | IN_CLOSE | IN_MOVE\n#-----------------------------------------------------------------------------------------------------------\nsettings =\n  respawn:\n    command:            [ 'lib/web/server.js', ],\n    name:               'ucdb'              # set monitor name\n    env:                { name: 'value', }  # set env vars\n    cwd:                '.'                 # set cwd\n    maxRestarts:        -1                  # how many restarts are allowed within 60s or -1 for infinite restarts\n    sleep:              100                 # time to sleep between restarts,\n    kill:               30000               # wait 30s before force killing after stopping\n    # stdio:              [...]               # forward stdio options\n    fork:               true                # fork instead of spawn\n  inotifywait:\n    recursive:  true\n    events:     IN_MODIFY || IN_CREATE || IN_DELETE\n    # events:     ALL\n\n\n\n############################################################################################################\nprocess_supervisor = respawn settings.respawn\n\n\nprocess_supervisor.on 'crash',  ( data ) -> urge \"^process_supervisor@crash^ The process_supervisor has crashed (too many restarts or spawn error).\"\nprocess_supervisor.on 'exit',   ( code, signal) ->\n  urge \"^process_supervisor@exit^ ( code: #{rpr code}, signal: #{rpr signal} ) child process has exited\"\n  # process.exit 1\n  if code > 100\n    debug '34474', 'aborting'\n    process_supervisor.stop()\n    process.exit code\n  return null\nprocess_supervisor.on 'sleep',  ( data ) -> whisper \"^process_supervisor@sleep^   process_supervisor is sleeping\"\nprocess_supervisor.on 'spawn',  ( data ) -> whisper \"^process_supervisor@spawn^   New child process has been spawned\"\nprocess_supervisor.on 'start',  ( data ) -> whisper \"^process_supervisor@start^   The process_supervisor has started\"\nprocess_supervisor.on 'stderr', ( data ) -> whisper \"^process_supervisor@stderr^  child process stderr has emitted data\"; whisper data\nprocess_supervisor.on 'stdout', ( data ) -> whisper \"^process_supervisor@stdout^  child process stdout has emitted data\"; whisper data\nprocess_supervisor.on 'stop',   ( data ) -> whisper \"^process_supervisor@stop^    The process_supervisor has fully stopped and the process is killed\"\nprocess_supervisor.on 'warn',   ( data ) -> whisper \"^process_supervisor@warn^    child process has emitted an error\"; warn error\n\n#.........................................................................................................\nexit_handler = => new Promise ( resolve ) =>\n  urge '^233376^', \"process about to exit\"\n  resolved = false\n  file_watcher.stop()\n  process_supervisor.stop -> resolve()\nprocess.on 'beforeExit', exit_handler\nprocess.on 'unhandledException', exit_handler\nprocess.on 'uncaughtException', exit_handler\n\n#.........................................................................................................\non_change = ( cause, d ) =>\n  path = PATH.join d.path, d.entry\n  whisper '^3332^', cause, path\n  return null unless path.endsWith '.js'\n  info '^272^', \"changed: #{path}\"\n  process_supervisor.stop ->\n    await sleep 0.5\n    process_supervisor.start()\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwatch_source_changes = ->\n  # src_path  = [ ( project_abspath 'lib' ), ( project_abspath 'src' ), ]\n  src_path      = project_abspath 'lib'\n  file_watcher  = new INotifyWait src_path, settings.inotifywait\n  help \"monitoring changes in #{src_path}\"\n  file_watcher.on 'error', ( error ) =>\n    warn CND.reverse error\n    if process_supervisor?\n      return process_supervisor.stop -> process.exit 65\n    else\n      defer -> process.exit 67\n    return null\n  return null\n  file_watcher.on IN_MODIFY, ( d ) => on_change 'IN_MODIFY', d\n  file_watcher.on IN_CREATE, ( d ) => on_change 'IN_CREATE', d\n  file_watcher.on IN_DELETE, ( d ) => on_change 'IN_DELETE', d\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  process_supervisor.start()\n  watch_source_changes()\n\n\n\n"
  ]
}