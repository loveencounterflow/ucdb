{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/web/server-restart.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB/WEB/SERVER-RESTART'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nINotifyWait               = require 'inotifywait-spawn'\nNOTIFIER                  = require 'node-notifier'\nrespawn                   = require 'respawn'\n{ project_abspath, }      = require '../helpers'\nsleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n#-----------------------------------------------------------------------------------------------------------\nINotifyWait               = require 'inotifywait-spawn'\n{ IN_ACCESS         # on file access\n  IN_MODIFY         # on changes\n  IN_CLOSE_WRITE    # on end writing\n  IN_CLOSE_NOWRITE  # on end reading\n  IN_OPEN           # on file opened\n  IN_MOVED_FROM     # on files moved from\n  IN_MOVED_TO       # on files move to\n  IN_CREATE         # on files creation (folder)\n  IN_DELETE         # on deletion (folder)\n  IN_DELETE_SELF    # on deletion of the watched path\n  IN_MOVE_SELF      # when watched path is moved\n  IN_UNMOUNT        # on patsh unmounted\n  IN_CLOSE          # on either IN_CLOSE_WRITE or IN_CLOSE_NOWRITE\n  IN_MOVE           # on either IN_MOVED_FROM or IN_MOVED_TO\n  }                       = INotifyWait;\nALL = IN_ACCESS | IN_MODIFY | IN_CLOSE_WRITE | IN_CLOSE_NOWRITE | IN_OPEN | IN_MOVED_FROM | IN_MOVED_TO | \\\n  IN_CREATE | IN_DELETE | IN_DELETE_SELF | IN_MOVE_SELF | IN_UNMOUNT | IN_CLOSE | IN_MOVE\n#-----------------------------------------------------------------------------------------------------------\nsettings =\n  respawn:\n    command:            [ 'lib/web/server.js', ],\n    name:               'ucdb'              # set monitor name\n    env:                { name: 'value', }  # set env vars\n    cwd:                '.'                 # set cwd\n    maxRestarts:        -1                  # how many restarts are allowed within 60s or -1 for infinite restarts\n    sleep:              100                 # time to sleep between restarts,\n    kill:               30000               # wait 30s before force killing after stopping\n    # stdio:              [...]               # forward stdio options\n    fork:               true                # fork instead of spawn\n  inotifywait:\n    recursive:  true\n    events:     IN_MODIFY || IN_CREATE || IN_DELETE\n    # events:     ALL\n\n\n\n############################################################################################################\nmonitor = respawn settings.respawn\n\n\nmonitor.on 'crash',  ( data ) -> urge 'crash',  \"The monitor has crashed (too many restarts or spawn error).\"\nmonitor.on 'exit',   ( code, signal) ->\n  urge 'exit',   \"( code: #{rpr code}, signal: #{rpr signal} ) child process has exited\"\n  # process.exit 1\n  if code > 100\n    debug '34474', 'aborting'\n    monitor.stop()\n    process.exit code\n  return null\nmonitor.on 'sleep',  ( data ) -> whisper 'sleep',  \"monitor is sleeping\"\nmonitor.on 'spawn',  ( data ) -> whisper 'spawn',  \"New child process has been spawned\"\nmonitor.on 'start',  ( data ) -> whisper 'start',  \"The monitor has started\"\nmonitor.on 'stderr', ( data ) -> whisper 'stderr', \"child process stderr has emitted data\"; whisper data\nmonitor.on 'stdout', ( data ) -> whisper 'stdout', \"child process stdout has emitted data\"; whisper data\nmonitor.on 'stop',   ( data ) -> whisper 'stop',   \"The monitor has fully stopped and the process is killed\"\nmonitor.on 'warn',   ( data ) -> whisper 'warn',   \"child process has emitted an error\"; warn error\n\n#.........................................................................................................\nexit_handler = => new Promise ( resolve ) =>\n  urge '^233376^', \"process about to exit\"\n  monitor.stop -> resolve()\nprocess.on 'beforeExit', exit_handler\nprocess.on 'unhandledException', exit_handler\nprocess.on 'uncaughtException', exit_handler\n\n#.........................................................................................................\non_change = ( cause, d ) =>\n  path = PATH.join d.path, d.entry\n  whisper '^3332^', cause, path\n  return null unless path.endsWith '.js'\n  info '^272^', \"changed: #{path}\"\n  monitor.stop()\n  await sleep 0.5\n  monitor.start()\n\n#-----------------------------------------------------------------------------------------------------------\nmonitor_source_changes = ->\n  # src_path  = [ ( project_abspath 'lib' ), ( project_abspath 'src' ), ]\n  src_path  = project_abspath 'lib'\n  w         = new INotifyWait src_path, settings.inotifywait\n  help \"monitoring changes in #{src_path}\"\n  w.on 'error', ( error ) => warn CND.reverse error\n  w.on IN_MODIFY, ( d ) => on_change 'IN_MODIFY', d\n  w.on IN_CREATE, ( d ) => on_change 'IN_CREATE', d\n  w.on IN_DELETE, ( d ) => on_change 'IN_DELETE', d\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  monitor.start()\n  monitor_source_changes()\n\n\n\n"
  ]
}