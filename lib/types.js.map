{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-MIRAGE/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nintertype                 = new ( require 'intertype' ).Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_clean_filename',\n  ###\n  acc. to https://github.com/parshap/node-sanitize-filename:\n    Control characters (0x00–0x1f and 0x80–0x9f)\n    Reserved characters (/, ?, <, >, \\, :, *, |, and \")\n    Unix reserved filenames (. and ..)\n    Trailing periods and spaces (for Windows)\n  ###\n  tests:\n    \"x is a nonempty_text\":                   ( x ) -> @isa.nonempty_text x\n    \"x does not contain control chrs\":        ( x ) -> not ( x.match /[\\x00-\\x1f]/      )?\n    \"x does not contain meta chrs\":           ( x ) -> not ( x.match /[\\/?<>\\:*|\"]/     )?\n    \"x is not `.` or `..`\":                   ( x ) -> not ( x.match /^\\.{1,2}$/        )?\n    \"x has no whitespace\":                    ( x ) -> not ( x.match /\\s/               )?\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_settings',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object              x\n    \"x.db_path is a nonempty_text\":           ( x ) -> @isa.nonempty_text       x.db_path\n    \"x.icql_path is a nonempty_text\":         ( x ) -> @isa.nonempty_text       x.icql_path\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_web_layout_SLUG_settings',\n  tests:\n    \"x is a object\":                          ( x ) -> @isa.object              x\n    \"x.missing is 'drop'\":                    ( x ) -> x.missing is 'drop'\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_cid',\n  tests:\n    \"x is an integer\":                        ( x ) -> @isa.integer x\n    \"x is between 0x20 and 0x10ffff\":         ( x ) -> 0x0 <= x <= 0x10ffff\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_cid_codepage_text',\n  tests:\n    \"x is a text\":                            ( x ) -> @isa.text x\n    \"x matches one to four hex digits\":       ( x ) -> ( x.match /// ^ [0-9a-f]{1,4} $ ///u )?\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_glyph',\n  tests:\n    \"x is a text\":                            ( x ) -> @isa.text x\n    \"x contains single codepoint\":            ( x ) -> ( x.match ///^.$///u )?\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'ucdb_font_id',\n  tests:\n    \"x is a text\":                            ( x ) -> @isa.text x\n    \"x starts with f followed by digits\":     ( x ) -> ( x.match ///^f[0-9]+$///u )?\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'nonnegative_integer',             ( x ) => ( Number.isInteger x ) and x >= 0\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT experimental ###\nL = @\n@cast =\n\n  #---------------------------------------------------------------------------------------------------------\n  iterator: ( x ) ->\n    switch ( type = L.type_of x )\n      when 'generator'          then return x\n      when 'generatorfunction'  then return x()\n      when 'list'               then return ( -> y for y in x )()\n    throw new Error \"^ucdb/types@3422 unable to cast a #{type} as iterator\"\n\n  #---------------------------------------------------------------------------------------------------------\n  hex: ( x ) ->\n    L.validate.nonnegative_integer x\n    return '0x' + x.toString 16\n\n  #---------------------------------------------------------------------------------------------------------\n  ucdb_cid_codepage_number: ( x ) ->\n    L.validate.ucdb_cid_codepage_text x\n    return parseInt x + '00', 16\n\n\n#     \"x.file_path is a ?nonempty text\":        ( x ) -> ( not x.file_path?   ) or @isa.nonempty_text x.file_path\n#     \"x.text is a ?text\":                      ( x ) -> ( not x.text?        ) or @isa.text          x.text\n#     \"x.file_path? xor x.text?\":               ( x ) ->\n#       ( ( x.text? ) or ( x.file_path? ) ) and not ( ( x.text? ) and ( x.file_path? ) )\n#     \"x.db_path is a ?nonempty text\":          ( x ) -> ( not x.db_path?     ) or @isa.nonempty_text x.db_path\n#     \"x.icql_path is a ?nonempty text\":        ( x ) -> ( not x.icql_path?   ) or @isa.nonempty_text x.icql_path\n#     \"x.default_key is a ?nonempty text\":      ( x ) -> ( not x.default_key? ) or @isa.nonempty_text x.default_key\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'mirage_main_row',\n#   tests:\n#     \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"x has key 'vnr'\":                        ( x ) -> @has_key             x, 'vnr'\n#     \"x has key 'text'\":                       ( x ) -> @has_key             x, 'text'\n#     \"x.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n#     \"x.vnr is a list\":                        ( x ) -> @isa.list            x.vnr\n#     # \"x.vnr starts, ends with '[]'\":           ( x ) -> ( x.vnr.match /^\\[.*\\]$/ )?\n#     # \"x.vnr is a JSON array of integers\":      ( x ) ->\n#     #   lst = JSON.parse x.vnr\n#     #   return false unless @isa.list lst\n#     #   return lst.every ( xx ) => @isa.integer xx\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'true', ( x ) -> x is true\n\n"
  ]
}