{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nFSP                       = FS.promises\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n{ walk_cids_in_cid_range\n  cwd_abspath\n  cwd_relpath\n  here_abspath\n  _drop_extension\n  project_abspath }       = require './helpers'\n@types                    = require './types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  cast\n  size_of\n  last_of\n  type_of }               = @types\n#...........................................................................................................\n_glob                     = require 'glob'\nglob                      = ( require 'util' ).promisify _glob\nPD                        = require 'pipedreams'\n{ $\n  $async\n  $watch\n  $show  }                = PD.export()\n#...........................................................................................................\nmkts_options              = require './_TEMPORARY_options'\nmkts_glyph_styles         = mkts_options.tex[ 'glyph-styles' ]\nMKNCR                     = require 'mingkwai-ncr'\nSVGTTF                    = require 'svgttf'\nMIRAGE                    = require 'sqlite-file-mirror'\nFONTMIRROR                = require 'fontmirror'\n# RCFG                      = require './read-configuration'\nMultimix                  = require 'multimix'\n#...........................................................................................................\ncache =\n  iclabels_by_glyphs: null\n#...........................................................................................................\nrunmode                   = 'production'\nrunmode                   = 'debug'\nrunmode                   = 'debug_small'\nrunmode                   = 'debug_cross_cjk'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@read_rsgs = ( me ) -> return new Promise ( resolve ) ->\n  #.........................................................................................................\n  $as_datom = ->\n    lnr = 0\n    return $ ( line, send ) ->\n      lnr++\n      return null if ( isa.blank_text line )\n      return null if ( line.match /^\\s*#/ )?\n      unless ( match = line.match /^(?<new_rsg>\\S+)\\s+(?<old_rsg>\\S+)\\s+(?<block_name>.+)$/ )?\n        throw new Error \"^ucdb@1001^ unexpected line format in line #{lnr}\"\n      send PD.new_datom '^entry', { match.groups..., lnr, }\n  #.........................................................................................................\n  $collect = ( collector ) ->\n    last = Symbol 'last'\n    return $ { last, }, ( d, send ) ->\n      if d is last\n        collector.new_by_old[ 'u'       ] = 'u-----'\n        collector.old_by_new[ 'u-----'  ] = 'u'\n        collector.new_by_old[ 'jzr'     ] = 'jzr---'\n        collector.old_by_new[ 'jzr---'  ] = 'jzr'\n        return send collector\n      collector.new_by_old[ d.old_rsg ] = d.new_rsg\n      collector.old_by_new[ d.new_rsg ] = d.old_rsg\n  #.........................................................................................................\n  # debug FS.readFileSync path\n  # debug path\n  path      = project_abspath '../../io/mingkwai-rack/jzrds/ucdx/rsgs.txt'\n  pipeline  = []\n  rsgs      = { new_by_old: {}, old_by_new: {} }\n  pipeline.push PD.read_from_file path\n  pipeline.push PD.$split()\n  pipeline.push $as_datom()\n  pipeline.push $collect rsgs\n  # pipeline.push PD.$show()\n  pipeline.push PD.$drain -> me.rsgs = rsgs; resolve null\n  PD.pull pipeline...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_iclabel = ( me, cid, glyph, csg, old_rsg ) ->\n  unless ( new_rsg = me.rsgs.new_by_old[ old_rsg ] )?\n    throw new Error \"^ucdb@1002^ unknown RSG #{rpr old_rsg}\"\n  # A:uc0---:005750:坐\n  switch csg\n    when 'u'    then  realm = 'A'; swatch = glyph\n    when 'jzr'  then  realm = 'I'; swatch = glyph\n    when 'test' then  realm = 'X'; swatch = glyph\n    else              realm = 'L'; swatch = '�'\n  cid_hex = ( cid.toString 16 ).padStart 6, '0'\n  return \"#{realm}:#{new_rsg}:#{cid_hex}:#{swatch}\"\n\n\n#===========================================================================================================\n# FONTNICKS\n#-----------------------------------------------------------------------------------------------------------\n@read_fontnicks = ( me ) ->\n  R         = {}\n  has_rows  = false\n  for row from me.db.configured_fontnicks_and_files()\n    { fontnick\n      filename\n      otf     }       = row\n    has_rows          = true\n    R[ fontnick ]     = { filename, }\n    R[ fontnick ].otf = otf if otf?\n  unless has_rows\n    throw new Error \"^ucdb@98567 unable to find any configured fonts\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_build_fontcache = ( me ) -> new Promise ( resolve, reject ) =>\n  ### TAINT cache data to avoid walking the tree many times, see https://github.com/isaacs/node-glob#readme ###\n  # validate.ucdb_clean_filename filename\n  #.........................................................................................................\n  fonts_home  = project_abspath '.', 'font-sources'\n  pattern     = fonts_home + '/**/*'\n  settings    = { matchBase: true, follow: true, stat:true, }\n  R           = {}\n  info \"^ucdb@1003^ building font cache...\"\n  globber     = new _glob.Glob pattern, settings, ( error, filepaths ) =>\n    return reject error if error?\n    info \"^ucdb@1004^ found #{filepaths.length} files\"\n    for filepath in filepaths\n      unless ( stat = globber.statCache[ filepath ] )?\n        ### TAINT stat missing file instead of throwing error ###\n        return reject new Error \"^77464^ not found in statCache: #{rpr filepath}\"\n      filename      = PATH.basename filepath\n      continue if R[ filename ]?\n      filesize      = stat.size\n      R[ filename ] = { filepath, filesize, }\n    resolve R\n\n#-----------------------------------------------------------------------------------------------------------\n@_describe_filename = ( me, filename ) ->\n  filepath  = await @_locate_fontfile     me, filename\n  filesize  = await @_filesize_from_path  me, filepath\n  return { filepath, filesize, }\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_table_fontnicks = ( me ) -> new Promise ( resolve, reject ) =>\n  me.fontnicks    = await @read_fontnicks me\n  font_cache      = await @_build_fontcache me\n  preamble        = []\n  data            = []\n  line_count      = 0\n  preamble.push me.db.create_table_fontnicks_first()\n  #.........................................................................................................\n  for fontnick, { filename, otf, } of me.fontnicks\n    line_count++\n    unless ( cache_entry = font_cache[ filename ] )?\n      warn '^4432^', \"unable to find fontnick #{fontnick}, filename #{filename}\"\n      continue\n    { filepath\n      filesize }    = cache_entry\n    otf            ?= null\n    row             = { fontnick, filename, filepath, filesize, otf, }\n    data.push ( me.db.create_table_fontnicks_middle row ) + ','\n  if ( last_idx = data.length - 1 ) > -1\n    data[ last_idx ] = data[ last_idx ].replace /,\\s*$/g, ''\n  #.........................................................................................................\n  sql         = [ preamble..., data..., ';', ].join '\\n'\n  me.db.$.execute sql\n  me.line_count += line_count\n  resolve null\n\n#-----------------------------------------------------------------------------------------------------------\n@_fontnick_from_tex_block = ( me, tex_block ) ->\n  return null unless tex_block?\n  # unless tex_block?\n  #   throw new Error \"^ucdb@1005^ tex_block must not be null\"\n  unless ( match = tex_block.match /^\\\\(?<texstyle>[a-zA-Z]+)\\{\\}$/ )?\n    throw new Error \"^ucdb@1006^ unexpected tex_block format #{rpr tex_block}\"\n  texstyle  = style?.cmd ? match.groups.texstyle\n  # texstyle  = @_fontnick_from_texname texstyle\n  unless ( fontnick = @fontnick_by_texstyles[ texstyle ] )?\n    throw new Error \"^ucdb@1007^ unknown texstyle #{rpr texstyle}\"\n  return fontnick\n\n#-----------------------------------------------------------------------------------------------------------\n@_fontnick_from_style = ( me, style = null ) ->\n  return null unless ( style                )?\n  return null unless ( command = style.cmd  )?\n  validate.nonempty_text command\n  unless ( fontnick = @fontnick_by_texstyles[ command ] )?\n    # throw new Error \"^ucdb@1008^ unknown texstyle #{rpr style}\"\n    warn \"^ucdb@1008^ unknown texstyle #{rpr style}\"\n    return null\n  return fontnick\n\n#-----------------------------------------------------------------------------------------------------------\n@_fontnick_from_style_or_tex_block = ( me, style, tex_block ) ->\n  # try\n  fontnick_A = @_fontnick_from_style      me, style\n  fontnick_B = @_fontnick_from_tex_block  me, tex_block\n  # catch error\n  #   if not me._seen_unknown.has error.message\n  #     me._seen_unknown.add error.message\n  #     warn '^47474', fncr, glyph, error.message\n  return fontnick_A ? fontnick_B ? null\n\n#-----------------------------------------------------------------------------------------------------------\n@_cleanup_style = ( me, style ) ->\n  return null unless style?\n  ### Remove redundant `cmd` property, drop empty styles: ###\n  delete style.cmd  if style.cmd?\n  return if ( Object.keys style ).length is 0 then null else style\n\n\n#===========================================================================================================\n# MAIN TABLE\n#-----------------------------------------------------------------------------------------------------------\n@_XXX_get_all_glyphs_as_list_from_cfg_glyphsets = ( me ) ->\n  ### TAINT to be replaced by a configuration that maps from runmodes to sets of glyphs and fonts ###\n  return Array.from ( @_XXX_get_all_glyphstrings_from_cfg_glyphsets me ).join ''\n\n@_XXX_get_all_glyphstrings_from_cfg_glyphsets = ( me ) ->\n  ### TAINT to be replaced by a configuration that maps from runmodes to sets of glyphs and fonts ###\n  return ( row.glyphs for row from me.db.$.query \"select setname, glyphs from cfg_glyphsets;\"  )\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_table_main = ( me ) -> new Promise ( resolve, reject ) =>\n  preamble          = []\n  data              = []\n  line_count        = 0\n  me._seen_unknown  = new Set()\n  preamble.push me.db.create_table_main_first()\n  await @read_rsgs me\n  cid_ranges        = @_XXX_get_all_glyphstrings_from_cfg_glyphsets me ### TAINT see remark in method ###\n  seen_cids         = new Set()\n  #.........................................................................................................\n  for cid_range in cid_ranges\n    #.......................................................................................................\n    ### TAINT use casting or call subroutine to derive range iterator ###\n    if isa.text cid_range\n      cids = ->\n        for _glyph in [ cid_range... ]\n          yield _glyph.codePointAt 0\n    #.......................................................................................................\n    else\n      cids = ->\n        for cid in [ cid_range[ 0 ] .. cid_range[ 1 ] ]\n          yield cid\n    #.......................................................................................................\n    for cid from cids()\n      continue if seen_cids.has cid\n      seen_cids.add cid\n      whisper '^ucdb@1009^', ( CND.format_number line_count ) if ( ++line_count % 10000 ) is 0\n      description = MKNCR.describe cid\n      glyph       = String.fromCodePoint cid\n      style       = mkts_glyph_styles[ glyph ] ? null\n      tags        = ( description?.tag ? [] ).sort()\n      is_u9cjkidg = ( 'assigned' in tags ) and ( 'cjk' in tags ) and ( 'ideograph' in tags )\n      tags        = ';' + ( tags.join ';' ) + ';'\n      csg         = description?.csg            ? null\n      rsg         = description?.rsg            ? null\n      fncr        = description?.fncr           ? null\n      sfncr       = description?.sfncr          ? null\n      ncr         = description?.ncr            ? null\n      xncr        = description?.xncr           ? null\n      iclabel     = @_get_iclabel me, cid, glyph, csg, rsg\n      # tex_glyph   = description?.tex?.codepoint ? null\n      #.....................................................................................................\n      # tex_block   = description?.tex?.block     ? null\n      # fontnick    = @_fontnick_from_style_or_tex_block me, style, tex_block\n      # unless fontnick?\n      #   warn \"^ucdb@1010^ missing fontnick for #{fncr} #{glyph}\"\n      #   continue\n      # style       = jr @_cleanup_style me, style\n      #.....................................................................................................\n      row         = {\n        iclabel, glyph, cid, is_u9cjkidg, tags,\n        csg, rsg, fncr, sfncr, ncr, xncr, }\n      data.push ( me.db.create_table_main_middle row ) + ','\n  #.........................................................................................................\n  if ( last_idx = data.length - 1 ) > -1\n    data[ last_idx ] = data[ last_idx ].replace /,\\s*$/g, ''\n  #.........................................................................................................\n  sql             = [ preamble..., data..., ';', ].join '\\n'\n  me.db.$.execute sql\n  me.line_count  += line_count\n  me.db.create_main_indexes()\n  resolve { line_count, }\n  return null\n\n\n#===========================================================================================================\n# OUTLINES\n#-----------------------------------------------------------------------------------------------------------\n@filepath_from_fontnick = ( me, fontnick ) -> me.db.$.single_value me.db.filepath_from_fontnick { fontnick, }\n\n#-----------------------------------------------------------------------------------------------------------\n@populate_table_outlines = ( me ) ->\n  me.db.create_table_contents()\n  me.db.create_table_outlines()\n  known_hashes = new Set()\n  XXX_includes      = null\n  XXX_includes      = \"\"\"babelstonehan\"\"\"\n  # XXX_includes      = \"\"\"sunexta thtshynptwo thtshynpone fandolheibold\"\"\"\n  if XXX_includes?\n    XXX_includes = XXX_includes.split /\\s+/\n    XXX_includes = XXX_includes.filter ( x ) -> x isnt ''\n  ### TAINT do not retrieve all glyphrows, iterate instead; call @_insert_into_table_outlines with\n  single glyphrow ###\n  XXX_sql           = \"\"\"\n    select\n        *\n      from main\n      order by cid;\"\"\"\n  glyphrows         = ( row           for row from me.db.$.query XXX_sql        )\n  fontnicks         = ( row.fontnick  for row from me.db.walk_fontnick_table()  )\n  me._outline_count = 0\n  debug \"^ucdb@43847^ XXX_includes:\", jr XXX_includes\n  for fontnick in fontnicks\n    continue if XXX_includes? and fontnick not in XXX_includes ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    info \"^ucdb@1011^ adding outlines for #{fontnick}\"\n    @_insert_into_table_outlines me, known_hashes, fontnick, glyphrows\n  @_XXXX_add_cached_outlines me, known_hashes, glyphrows\n  me.db.finalize_outlines()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_false_fallback_pathdata_from_SVGTTF_font = ( me, SVGTTF_font ) ->\n  fontnick  = SVGTTF_font.nick\n  row       = ( me.db.$.first_row me.db.false_fallback_probe_from_fontnick { fontnick, } ) ? null\n  return null unless row?\n  cid       = row.probe.codePointAt 0\n  d         = SVGTTF.glyph_and_pathdata_from_cid SVGTTF_font.metrics, SVGTTF_font.otjsfont, cid\n  return null unless d?\n  return d.pathdata\n\n#-----------------------------------------------------------------------------------------------------------\n@_insert_into_table_outlines = ( me, known_hashes, fontnick, glyphrows ) ->\n  ### NOTE to be called once for each font with all or some cid_ranges ###\n  outlines_data     = []\n  content_data      = []\n  line_count        = 0\n  duplicate_count   = 0\n  batch_size        = 5000\n  progress_count    = 100 ### output progress whenever multiple of this number reached ###\n  # fragment insert_into_outlines_first(): insert into outlines ( iclabel, fontnick, pathdata ) values\n  #.........................................................................................................\n  ### TAINT refactor ###\n  SVGTTF_font                 = {}\n  SVGTTF_font.nick            = fontnick\n  SVGTTF_font.path            = @filepath_from_fontnick me, fontnick\n  SVGTTF_font.metrics         = SVGTTF.new_metrics()\n  try\n    SVGTTF_font.otjsfont        = SVGTTF.otjsfont_from_path SVGTTF_font.path\n  catch error\n    warn \"^ucdb@1012^ when trying to open font #{rpr fontnick}, an error occurred: #{error.message}\"\n    return null\n  # return null\n  SVGTTF_font.advance_factor  = SVGTTF_font.metrics.em_size / SVGTTF_font.otjsfont.unitsPerEm\n  XXX_advance_scale_factor    = SVGTTF_font.advance_factor * ( SVGTTF_font.metrics.global_glyph_scale ? 1 )\n  #.........................................................................................................\n  false_fallback_pathdata = @_get_false_fallback_pathdata_from_SVGTTF_font me, SVGTTF_font\n  if false_fallback_pathdata?\n    warn '^ucdb@6374445^', \"filtering codepoints with outlines that look like fallback (placeholder glyph)\"\n  #.........................................................................................................\n  for { iclabel, cid, glyph, } from cast.iterator glyphrows\n    d = SVGTTF.glyph_and_pathdata_from_cid SVGTTF_font.metrics, SVGTTF_font.otjsfont, cid\n    continue if ( not d? ) or ( false_fallback_pathdata? and ( d.pathdata is false_fallback_pathdata ) )\n    whisper '^ucdb@1013^', me._outline_count - 1 if ( me._outline_count++ % progress_count ) is 0\n    advance           = d.glyph.advanceWidth * XXX_advance_scale_factor\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    if ( isa.nan advance ) or ( advance is 0 )\n      ### TAINT code repetition ###\n      cid_hex = '0x' + ( cid.toString 16 ).padStart 4, '0'\n      warn \"^ucdb@3332^ illegal advance for #{SVGTTF_font.nick} #{cid_hex}: #{rpr advance}; setting to 1\"\n      advance           = 1\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    content           = jr { advance, pathdata: d.pathdata, }\n    hash              = MIRAGE.sha1sum_from_text content\n    #.......................................................................................................\n    if known_hashes.has hash\n      duplicate_count++\n    else\n      known_hashes.add hash\n      content_data.push ( me.db.insert_into_contents_middle { hash, content, } ) + ','\n    #.......................................................................................................\n    outlines_data.push ( me.db.insert_into_outlines_middle { iclabel, fontnick, outline_json_hash: hash, } ) + ','\n    if ( outlines_data.length + content_data.length ) >= batch_size\n      line_count += @_flush_outlines me, content_data, outlines_data\n  #.........................................................................................................\n  line_count += @_flush_outlines me, content_data, outlines_data\n  if duplicate_count > 0\n    urge \"^ucdb@3376^ found #{duplicate_count} duplicates for font #{fontnick}\"\n  return line_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_iclabels_by_glyphs = ( me ) ->\n  return R if ( R = cache.iclabels_by_glyphs )?\n  R = {}\n  for row from me.db.read_iclabels_and_glyphs()\n    R[ row.glyph ] = row.iclabel\n  cache.iclabels_by_glyphs = R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_XXXX_add_cached_outlines = ( me, known_hashes, glyphrows ) ->\n  ### NOTE this method will replace `_insert_into_table_outlines()` ###\n  iclabels_by_glyphs  = @_get_iclabels_by_glyphs me\n  outlines_data       = []\n  content_data        = []\n  line_count          = 0\n  duplicate_count     = 0\n  batch_size          = 5000\n  progress_count      = 10000 ### output progress whenever multiple of this number reached ###\n  # fragment insert_into_outlines_first(): insert into outlines ( iclabel, fontnick, pathdata ) values\n  #.........................................................................................................\n  ### TAINT where will cache_path come from? ###\n  cache_path  = '/home/flow/jzr/benchmarks/assets/fontmirror/cache'\n  fontnick    = null\n  for d from FONTMIRROR.walk_cached_outlines null, cache_path\n    switch d.key\n      when '^first'\n        help '^2328^', jr d\n      when '^last'\n        help '^2328^', jr d\n      when '^new-font'\n        fontnick  = d.fontnick\n        relpath   = cwd_relpath d.path\n        urge '^56798^', \"adding outlines for font #{fontnick} (#{relpath})\"\n        ### TAINT use method to derive fontnick from filename ###\n      #.....................................................................................................\n      when '^outline'\n        ### TAINT use function call ###\n        # info '^56798^', ( jr d )[ .. 80 ]\n        ### TAINT cache iclabels from DB ###\n        { cid_hex\n          glyph\n          advance\n          pathdata  } = d\n        cid_hex       = cid_hex.padStart 6, '0'\n        content       = jr { advance, pathdata, }\n        hash          = MIRAGE.sha1sum_from_text content\n        #...................................................................................................\n        unless ( iclabel = iclabels_by_glyphs[ glyph ] )?\n          message = \"^ucdb/add_cached_outlines@4474^ no IcLabel for glyph #{rpr glyph}\"\n          # throw new Error message\n          # warn message\n          continue\n        #...................................................................................................\n        whisper '^ucdb@1016^', me._outline_count - 1 if ( me._outline_count++ % progress_count ) is 0\n        if known_hashes.has hash\n          duplicate_count++\n        else\n          known_hashes.add hash\n          row = { hash, content, }\n          content_data.push ( me.db.insert_into_contents_middle row ) + ','\n        #...................................................................................................\n        row = { iclabel, fontnick, outline_json_hash: hash, }\n        outlines_data.push ( me.db.insert_into_outlines_middle row ) + ','\n        if ( outlines_data.length + content_data.length ) >= batch_size\n          line_count += @_flush_outlines me, content_data, outlines_data\n      #.....................................................................................................\n      else\n        excerpt = ( jr d )[ .. 100 ]\n        throw new Error \"^ucdb/cached_outlines@4458 unknown datom key #{rpr d.key} (#{excerpt})\"\n  #.........................................................................................................\n  line_count += @_flush_outlines me, content_data, outlines_data\n  if duplicate_count > 0\n    urge \"^ucdb@3376^ found #{duplicate_count} duplicates for font #{fontnick}\"\n  return line_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_flush_outlines = ( me, content_data, outlines_data ) ->\n  ### TAINT code duplication, use ICQL method (TBW) ###\n  #.........................................................................................................\n  remove_comma = ( data ) ->\n    last_idx          = data.length - 1\n    data[ last_idx ]  = data[ last_idx ].replace /,\\s*$/g, ''\n    return null\n  #.........................................................................................................\n  store_data = ( name, data ) ->\n    return if data.length is 0\n    remove_comma data\n    sql = me.db[ name ]() + '\\n' + ( data.join '\\n' ) + ';'\n    me.db.$.execute sql\n    data.length = 0\n    return null\n  #.........................................................................................................\n  line_count      = content_data.length + outlines_data.length\n  store_data 'insert_into_contents_first',   content_data\n  store_data 'insert_into_outlines_first',  outlines_data\n  me.line_count  += line_count\n  return line_count\n\n\n#===========================================================================================================\n# DB CREATION\n#-----------------------------------------------------------------------------------------------------------\n@new_ucdb = ( settings = null ) ->\n  defaults =\n    db_path:    project_abspath './db/ucdb.db'\n    icql_path:  project_abspath './db/ucdb.icql'\n  #.........................................................................................................\n  settings                = { defaults..., settings..., }\n  validate.ucdb_settings settings\n  #.........................................................................................................\n  R                       = {}\n  R.db                    = ( require './db' ).new_db settings\n  R.dbr                   = R.db\n  R.dbw                   = ( require './db' ).new_db settings\n  R.line_count            = 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@create = ( settings = null ) -> new Promise ( resolve, reject ) =>\n  me = @new_ucdb settings\n  urge 'ucdb/create@1/6'; await @read_configuration               me\n  urge 'ucdb/create@2/6'; await @compile_glyphsets_configuration  me\n  urge 'ucdb/create@3/6'; await @populate_table_fontnicks         me\n  urge 'ucdb/create@4/6'; await @populate_table_main              me\n  urge 'ucdb/create@5/6'; await @compile_configurations           me\n  urge 'ucdb/create@6/6'; await @populate_table_outlines          me\n  # urge 'ucdb/create@6/6'; # me.db.create_view_main_with_deltas_etc()\n  resolve me\n\n#-----------------------------------------------------------------------------------------------------------\n@write_ucdb = ( settings = null ) ->\n  t0      = Date.now()\n  try\n    ucdb  = await @create settings\n  catch error\n    warn error.message\n    process.exit 1\n  t1      = Date.now()\n  dt      = t1 - t0\n  dts     = ( dt / 1000 ).toFixed 3\n  f       = ( ucdb.line_count / dt * 1000 ).toFixed 3\n  help \"^ucdb@1014^ wrote #{ucdb.line_count} records in #{dts} s (#{f} Hz)\"\n  return null\n  # count = 0\n  # for row from ucdb.db.read_codepoint_records()\n  #   count++\n  #   break if count > 5\n  #   info 'µ33211', jr row\n  # help 'ok'\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT must go to configuration file ###\n@fontnick_by_texstyles =\n  latin:                                'lmromantenregular'\n  cnjzr:                                'jizurathreeb'\n  cnxa:                                 'sunexta'\n  cnxb:                                 'sunflowerucjkxb'\n  cnxc:                                 'hanaminb'\n  cnxd:                                 'babelstonehan'\n  cn:                                   'sunexta'\n  hg:                                   'nanummyeongjo'\n  hi:                                   'ipamp'\n  ka:                                   'ipamp'\n  mktsRsgFb:                            'sunexta'\n  cncone:                               'babelstonehan' # CJK Compatibility 1\n  cnUcjkcmp:                            'ipaexm'        # CJK Compatibility 1\n  cnUcjkcmpf:                           'hanamina'      # CJK Compatibility 1\n  cnUcjkcmpione:                        'hanamina'      # CJK Compatibility 1\n  cnUcjkcmpitwo:                        'hanamina'      # CJK Compatibility 2\n  cnrone:                               'sunexta'       # CJK Radicals 1\n  cnrtwo:                               'sunexta'       # CJK Radicals 2\n  cnsym:                                'hanamina'\n  cnstrk:                               'sunexta'\n  cnencsupp:                            'sarasaregular'\n  cnxBabel:                             'babelstonehan'\n  cnxHanaA:                             'hanamina'\n  cnxHanaB:                             'hanaminb'\n  cnxSunXA:                             'sunexta'\n  cnxUming:                             'uming'\n  #.........................................................................................................\n  cnxJzr:                               'jizurathreeb'\n  mktsFontfileAsanamath:                'asanamath'\n  mktsFontfileCwtexqheibold:            'cwtexqheibold'\n  mktsFontfileDejavuserif:              'dejavuserif'\n  mktsFontfileEbgaramondtwelveregular:  'ebgaramondtwelveregular'\n  mktsFontfileNanummyeongjo:            'nanummyeongjo'\n  mktsFontfileSunexta:                  'sunexta'\n  mktsStyleBoxDrawing:                  'iosevkatermslabmedium'\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT must go to configuration file ###\n@fontnick_by_rsgs =\n  'u-cjk-cmpi1':          'babelstonehan'\n  'u-cjk-xd':             'babelstonehan'\n  'u-cjk-sym':            'hanamina'\n  'u-cjk-xc':             'hanaminb'\n  'u-cjk-hira':           'ipamp'\n  'u-cjk-kata':           'ipamp'\n  'jzr':                  'jizurathreeb'\n  'u-cdm':                'lmromantenregular'\n  'u-cyrl':               'lmromantenregular'\n  'u-cyrl-s':             'lmromantenregular'\n  'u-grek':               'lmromantenregular'\n  'u-latn':               'lmromantenregular'\n  'u-latn-a':             'lmromantenregular'\n  'u-latn-b':             'lmromantenregular'\n  'u-punct':              'lmromantenregular'\n  'u-latn-1':             'lmromantenregular'\n  'u-hang-syl':           'nanummyeongjo'\n  'u-arrow':              'sunexta'\n  'u-arrow-b':            'sunexta'\n  'u-boxdr':              'sunexta'\n  'u-cjk-cmpf':           'sunexta'\n  'u-llsym':              'sunexta'\n  'u':                    'sunexta'\n  'u-cjk-strk':           'sunexta'\n  'u-cjk-xa':             'sunexta'\n  'u-geoms':              'sunexta'\n  'u-cjk':                'sunexta'\n  'u-cjk-rad2':           'sunexta'\n  'u-cjk-xb':             'sunflowerucjkxb'\n\n# keys = [ 'cn', 'cncone', 'cnjzr', 'cnrone', 'cnrtwo', 'cnstrk', 'cnsym', 'cnxa', 'cnxb', 'cnxBabel', 'cnxc',\n#   'cnxd', 'cnxHanaA', 'cnxHanaB', 'cnxJzr', 'cnxSunXA', 'cnxUming', 'hg', 'hi', 'ka', 'latin',\n#   'mktsFontfileAsanamath', 'mktsFontfileCwtexqheibold', 'mktsFontfileDejavuserif',\n#   'mktsFontfileEbgaramondtwelveregular', 'mktsFontfileNanummyeongjo', 'mktsFontfileSunexta', 'mktsRsgFb',\n#   'mktsStyleBoxDrawing', ]\n\n# for key in keys\n#   info key unless @fontnick_by_texstyles[ key ]?\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_find_fontnick_ranges = ( me = null ) ->\n#   me ?= @new_ucdb()\n#   me.db.create_view_main_with_deltas_etc()\n#   # for row from me.db.main_with_deltas()\n#   #   info '^77763^', row.iclabel, row.fontnick, row.rear_delta_cid, row.fore_delta_cid\n#   for row from me.db.fontnick_boundaries()\n#     # help '^77456^', row\n#     help '^77763^', \\\n#       ( CND.yellow row.fontnick.padEnd 30 ),            \\\n#       ( CND.blue row.first_iclabel        ),            \\\n#       ( CND.blue row.last_iclabel         ),            \\\n#       ( CND.grey row.first_cid            ),            \\\n#       ( CND.grey row.last_cid             )\n#       # ( CND.yellow row.cid.toString 16 ), \\\n#       # ( CND.orange if row.last_cid? then row.next_cid.toString 16 else '' )\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Ucdb extends Multimix\n  @include MAIN, { overwrite: false, }\n  @include ( require './styles.mixin'         ), { overwrite: false, }\n  @include ( require './configuration.mixin'  ), { overwrite: false, }\n  # @extend MAIN, { overwrite: false, }\n\nmodule.exports = UCDB = new Ucdb()\n\n\n############################################################################################################\nif require.main is module then do =>\n  # info await @_build_fontcache null\n  await @write_ucdb()\n\n  # # await @read_rsgs null\n  # @_find_fontnick_ranges()\n  # help await @_describe_filename null, 'DejaVuSansMono-Bold.ttf'\n  # help await @_describe_filename null, 'TH-Khaai-TP2.ttf'\n  # help await @_locate_fontfile 'TH-Khaai-*.ttf'\n\n# all_tags = \"\"\"ascii-whitespace assigned bopomofo cjk geta hangeul hexagram hiragana ideograph idl jamo\n#   japanese kana kanbun katakana korean kxr punctuation stroke syllable symbol trigram unassigned vertical\n#   yijing\"\"\"\n\n\n\n\n"
  ]
}