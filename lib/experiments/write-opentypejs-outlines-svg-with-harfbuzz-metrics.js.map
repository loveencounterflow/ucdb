{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/experiments/write-opentypejs-outlines-svg-with-harfbuzz-metrics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB/EXPERIMENTS/WRITE-OPENTYPEJS-OUTLINES-SVG-WITH-HARFBUZZ-METRICS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nOT                        = require 'opentype.js'\nPATH                      = require 'path'\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  cast\n  size_of\n  last_of\n  type_of }               = types\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@load_font = ( path ) -> new Promise ( resolve, reject ) =>\n  OT.load path, ( error, font ) =>\n    return reject error if error?\n    resolve font\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@load_font_sync = ( path ) ->\n  try return OT.loadSync path catch error\n    warn \"^fontmirror@1012^ when trying to open font #{rpr path}, an error occurred: #{error.message}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@resolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../..', path\n\n#-----------------------------------------------------------------------------------------------------------\n@show_font_details = ( font ) ->\n  keys = [\n    'supported'\n    # 'glyphs'\n    # 'encoding'\n    # 'position'\n    # 'substitution'\n    # 'tables'\n    # '_push'\n    # '_hmtxTableData'\n    'outlinesFormat'\n    'unitsPerEm'\n    'ascender'\n    'descender'\n    'numberOfHMetrics'\n    'numGlyphs'\n    # 'glyphNames'\n    # 'names'\n    # 'gsubrs'\n    # 'gsubrsBias'\n    # 'defaultWidthX'\n    # 'nominalWidthX'\n    # 'subrs'\n    # 'subrsBias'\n    'nGlyphs'\n    # 'cffEncoding'\n    # 'kerningPairs'\n    # 'hasChar'\n    # 'charToGlyphIndex'\n    # 'charToGlyph'\n    # 'updateFeatures'\n    # 'stringToGlyphs'\n    # 'nameToGlyphIndex'\n    # 'nameToGlyph'\n    # 'glyphIndexToName'\n    # 'getKerningValue'\n    'defaultRenderOptions'\n    # 'forEachGlyph'\n    # 'getPath'\n    # 'getPaths'\n    # 'getAdvanceWidth'\n    # 'draw'\n    # 'drawPoints'\n    # 'drawMetrics'\n    # 'getEnglishName'\n    # 'validate'\n    # 'toTables'\n    # 'toBuffer'\n    # 'toArrayBuffer'\n    # 'download'\n    'fsSelectionValues'\n    'usWidthClasses'\n    'usWeightClasses'\n    ]\n  for key in keys\n    # debug '^765^', key\n    if isa.function font[ key ] then  text = rpr font[ key ]()\n    else                              text = rpr font[ key ]\n    echo ( CND.blue key.padEnd 20 ), ( CND.yellow text[ .. 100 ] )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = -> new Promise ( resolve, reject ) =>\n  font_path = @resolve_path 'font-sources/010-jizura-fonts/lmroman10-italic.otf'\n  help \"using font #{font_path}\"\n  #.........................................................................................................\n  try font = await @load_font font_path catch error\n    warn error\n    return resolve()\n  #.........................................................................................................\n  glyph_idx       = 51\n  decimal_places  = 3\n  glyph           = font.glyphs.glyphs[ glyph_idx ]\n  path_svg        = glyph.path.toSVG decimal_places\n  debug '^draw-glyphs-as-svg@2^', ( k for k of font )\n  @show_font_details font\n  # debug '^draw-glyphs-as-svg@3^', font.glyphs\n  # debug '^draw-glyphs-as-svg@4^', font.glyphs.glyphs[ glyph_idx ]\n  # debug '^draw-glyphs-as-svg@5^', font.glyphs.glyphs[ glyph_idx ].path.toSVG\n  debug '^draw-glyphs-as-svg@6^', font.glyphs.glyphs[ glyph_idx ].path.toSVG( decimal_places )\n\n\n\n\n[ { upem: 1000, gid: 28, cluster: 0, x_advance: 0.511 }\n  { upem: 1000, gid: 123, cluster: 1, x_advance: 0.882 }\n  { upem: 1000, gid: 72, cluster: 4, x_advance: 0.256 }\n  { upem: 1000, gid: 66, cluster: 5, x_advance: 0.307 }\n  { upem: 1000, gid: 28, cluster: 6, x_advance: 0.511 }\n  { upem: 1000, gid: 105, cluster: 7, x_advance: 0.332 }\n  { upem: 1000, gid: 66, cluster: 8, x_advance: 0.307 }\n  { upem: 1000, gid: 81, cluster: 9, x_advance: 0.511 }\n  { upem: 1000, gid: 77, cluster: 10, x_advance: 0.562 } ]\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo()\n\n\n\n\n\n\n\n\n"
  ]
}