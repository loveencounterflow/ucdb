{
  "version": 3,
  "file": "helpers.js",
  "sourceRoot": "..",
  "sources": [
    "src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'UCDB/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@cwd_abspath              = CND.cwd_abspath.bind  CND\n@cwd_relpath              = CND.cwd_relpath.bind  CND\n@here_abspath             = CND.here_abspath.bind CND\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\n@project_abspath          = ( ( P... ) -> @here_abspath __dirname, '..', P... ).bind @\nPATH                      = require 'path'\nFS                        = require 'fs'\ntypes                     = require './types'\n{ isa\n  validate\n  type_of\n  defaults\n  Failure }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@load_configuration = ->\n  return Object.assign ( x.settings for x in @_load_configurations_from_standard_locations() )...\n\n#-----------------------------------------------------------------------------------------------------------\n@_load_configurations_from_standard_locations = ->\n  home  = start_home = @project_abspath()\n  R     = []\n  loop\n    break if home is '/'\n    path = PATH.resolve PATH.join home, 'ucdb.json'\n    try\n      R.push { path, settings: ( require path ), }\n    catch error\n      throw error unless error.code is 'MODULE_NOT_FOUND'\n    home = PATH.dirname home\n  if R.length is 0\n    throw new Error \"^ucdb#2201 unable to locate file ucdb.json in any parent directory of #{start_home}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_user_home = -> PATH.abspath ( require 'os' ).homedir()\n\n# debug @load_configuration()\n# debug ( k for k of require.main)\n# debug require.main.filename\n# debug ( require 'app-root-path' ).path\n# debug ( require 'os' ).homedir()\n\n# PATH                      = require 'path'\n# #...........................................................................................................\n# @assign                   = Object.assign\n\n\n# info @here_abspath  '/foo/bar', '/baz/coo'\n# info @cwd_abspath   '/foo/bar', '/baz/coo'\n# info @here_abspath  '/baz/coo'\n# info @cwd_abspath   '/baz/coo'\n# info @here_abspath  '/foo/bar', 'baz/coo'\n# info @cwd_abspath   '/foo/bar', 'baz/coo'\n# info @here_abspath  'baz/coo'\n# info @cwd_abspath   'baz/coo'\n# info @here_abspath  __dirname, 'baz/coo', 'x.js'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_cids_in_cid_range = ( range ) =>\n  ### TAINT this method should conceivably be in a type casting module ###\n  return ( -> yield chr.codePointAt 0 for chr in [ range... ]                 )() if isa.text range\n  ### TAINT do some type checking (must be list of two CIDs) ###\n  return ( -> yield cid               for cid in [ range[ 0 ] .. range[ 1 ] ] )()\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @readable_stream_from_text = ( text ) ->\n#   ### thx to https://stackoverflow.com/a/22085851/7568091 ###\n#   R = new ( require 'stream' ).Readable()\n#   R._read = () => {} # redundant?\n#   R.push text\n#   R.push null\n#   return R\n\n\n\n\n############################################################################################################\n### TAINT the following methods that are prefixed with `SQL_` should become part of an updated ICQL APLI ###\n############################################################################################################\n\n#-----------------------------------------------------------------------------------------------------------\n@SQL_text_as_literal = ( x ) ->\n  ### NOTE: lifted from ICQL ###\n  validate.text x\n  \"'\" + ( x.replace /'/g, \"''\" ) + \"'\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @SQL_list_as_json_literal = ( x ) ->\n#   ### NOTE: lifted from ICQL ###\n#   validate.list x\n#   return @SQL_text_as_literal JSON.stringify x\n\n#-----------------------------------------------------------------------------------------------------------\n@SQL_escape_value = ( x ) ->\n  ### NOTE: lifted from ICQL ###\n  switch type = type_of x\n    when 'text'     then return @SQL_text_as_literal x\n    # when 'list'     then return @SQL_list_as_json_literal x\n    when 'number'   then return x.toString()\n    when 'boolean'  then return ( if x then '1' else '0' )\n    when 'null'     then return 'null'\n  throw new Failure '^sfm/sql@error_no_literal^', \"unable to express a #{type} as SQL literal, got #{rpr x}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@SQL_generate_values_tuple = ( values ) ->\n  validate.list values\n  return '( ' + ( ( @SQL_escape_value x for x in values ).join ', ' ) + ' )'\n\n\n\n\n\n"
  ]
}